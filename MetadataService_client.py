##################################################
# file: MetadataService_client.py
#
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py metadata.wsdl
#
##################################################

# Import embedded ssl library, necessary for linux systems
import ssl_importer

# Import ZSI web service library from egg file
import sys
sys.path.append('lib/ZSI-2.0-py2.5.egg')

from MetadataService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

# Locator
class MetadataServiceLocator:
    Metadata_address = "https://na11-api.salesforce.com/services/Soap/m/27.0"
    print "MetadataServiceLocator called"
    def getMetadataAddress(self):
        print 'getMetadataAddress'
        return MetadataServiceLocator.Metadata_address
    def getMetadata(self, url=None, **kw):
        print 'getMetadata'
        ssl_importer.import_ssl_lib()
        return MetadataBindingSOAP(url or MetadataServiceLocator.Metadata_address, **kw)

# Methods
class MetadataBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: checkDeployStatus
    def checkDeployStatus(self, request, soapheaders=(), **kw):
        if isinstance(request, checkDeployStatusRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.Send(None, None, request, soapaction="", soapheaders=soapheaders, **kw)
        # no output wsaction
        response = self.binding.Receive(checkDeployStatusResponse.typecode)
        self.soapheaders = self.binding.ps.ParseHeaderElements([GED(u'http://soap.sforce.com/2006/04/metadata', u'DebuggingInfo'),])
        return response

    # op: checkRetrieveStatus
    def checkRetrieveStatus(self, request, soapheaders=(), **kw):
        if isinstance(request, checkRetrieveStatusRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.Send(None, None, request, soapaction="", soapheaders=soapheaders, **kw)
        # no output wsaction
        response = self.binding.Receive(checkRetrieveStatusResponse.typecode)
        return response

    # op: checkStatus
    def checkStatus(self, request, soapheaders=(), **kw):
        if isinstance(request, checkStatusRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.Send(None, None, request, soapaction="", soapheaders=soapheaders, **kw)
        # no output wsaction
        response = self.binding.Receive(checkStatusResponse.typecode)
        return response

    # op: create
    def create(self, request, soapheaders=(), **kw):
        if isinstance(request, createRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.Send(None, None, request, soapaction="", soapheaders=soapheaders, **kw)
        # no output wsaction
        response = self.binding.Receive(createResponse.typecode)
        return response

    # op: delete
    def delete(self, request, soapheaders=(), **kw):
        if isinstance(request, deleteRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.Send(None, None, request, soapaction="", soapheaders=soapheaders, **kw)
        # no output wsaction
        response = self.binding.Receive(deleteResponse.typecode)
        return response

    # op: deploy
    def deploy(self, request, soapheaders=(), **kw):
        if isinstance(request, deployRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.Send(None, None, request, soapaction="", soapheaders=soapheaders, **kw)
        # no output wsaction
        response = self.binding.Receive(deployResponse.typecode)
        return response

    # op: describeMetadata
    def describeMetadata(self, request, soapheaders=(), **kw):
        if isinstance(request, describeMetadataRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.Send(None, None, request, soapaction="", soapheaders=soapheaders, **kw)
        # no output wsaction
        response = self.binding.Receive(describeMetadataResponse.typecode)
        return response

    # op: listMetadata
    def listMetadata(self, request, soapheaders=(), **kw):
        if isinstance(request, listMetadataRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.Send(None, None, request, soapaction="", soapheaders=soapheaders, **kw)
        # no output wsaction
        response = self.binding.Receive(listMetadataResponse.typecode)
        return response

    # op: retrieve
    def retrieve(self, request, soapheaders=(), **kw):
        if isinstance(request, retrieveRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.Send(None, None, request, soapaction="", soapheaders=soapheaders, **kw)
        # no output wsaction
        response = self.binding.Receive(retrieveResponse.typecode)
        return response

    # op: update
    def update(self, request, soapheaders=(), **kw):
        if isinstance(request, updateRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        # TODO: Check soapheaders
        self.binding.Send(None, None, request, soapaction="", soapheaders=soapheaders, **kw)
        # no output wsaction
        response = self.binding.Receive(updateResponse.typecode)
        return response

checkDeployStatusRequest = GED("http://soap.sforce.com/2006/04/metadata", "checkDeployStatus").pyclass

checkDeployStatusResponse = GED("http://soap.sforce.com/2006/04/metadata", "checkDeployStatusResponse").pyclass

checkRetrieveStatusRequest = GED("http://soap.sforce.com/2006/04/metadata", "checkRetrieveStatus").pyclass

checkRetrieveStatusResponse = GED("http://soap.sforce.com/2006/04/metadata", "checkRetrieveStatusResponse").pyclass

checkStatusRequest = GED("http://soap.sforce.com/2006/04/metadata", "checkStatus").pyclass

checkStatusResponse = GED("http://soap.sforce.com/2006/04/metadata", "checkStatusResponse").pyclass

createRequest = GED("http://soap.sforce.com/2006/04/metadata", "create").pyclass

createResponse = GED("http://soap.sforce.com/2006/04/metadata", "createResponse").pyclass

deleteRequest = GED("http://soap.sforce.com/2006/04/metadata", "delete").pyclass

deleteResponse = GED("http://soap.sforce.com/2006/04/metadata", "deleteResponse").pyclass

deployRequest = GED("http://soap.sforce.com/2006/04/metadata", "deploy").pyclass

deployResponse = GED("http://soap.sforce.com/2006/04/metadata", "deployResponse").pyclass

describeMetadataRequest = GED("http://soap.sforce.com/2006/04/metadata", "describeMetadata").pyclass

describeMetadataResponse = GED("http://soap.sforce.com/2006/04/metadata", "describeMetadataResponse").pyclass

listMetadataRequest = GED("http://soap.sforce.com/2006/04/metadata", "listMetadata").pyclass

listMetadataResponse = GED("http://soap.sforce.com/2006/04/metadata", "listMetadataResponse").pyclass

retrieveRequest = GED("http://soap.sforce.com/2006/04/metadata", "retrieve").pyclass

retrieveResponse = GED("http://soap.sforce.com/2006/04/metadata", "retrieveResponse").pyclass

updateRequest = GED("http://soap.sforce.com/2006/04/metadata", "update").pyclass

updateResponse = GED("http://soap.sforce.com/2006/04/metadata", "updateResponse").pyclass
