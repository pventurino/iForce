##################################################
# file: MetadataService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py metadata.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://soap.sforce.com/2006/04/metadata
##############################

class ns0:
    targetNamespace = "http://soap.sforce.com/2006/04/metadata"

    class AsyncResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AsyncResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AsyncResult_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"checkOnly"), aname="_checkOnly", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"done"), aname="_done", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ID",lazy=False)(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numberComponentErrors"), aname="_numberComponentErrors", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numberComponentsDeployed"), aname="_numberComponentsDeployed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numberComponentsTotal"), aname="_numberComponentsTotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numberTestErrors"), aname="_numberTestErrors", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numberTestsCompleted"), aname="_numberTestsCompleted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numberTestsTotal"), aname="_numberTestsTotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","AsyncRequestState",lazy=False)(pname=(ns,"state"), aname="_state", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"stateDetail"), aname="_stateDetail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"stateDetailLastModifiedDate"), aname="_stateDetailLastModifiedDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","StatusCode",lazy=False)(pname=(ns,"statusCode"), aname="_statusCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._checkOnly = None
                    self._done = None
                    self._id = None
                    self._message = None
                    self._numberComponentErrors = None
                    self._numberComponentsDeployed = None
                    self._numberComponentsTotal = None
                    self._numberTestErrors = None
                    self._numberTestsCompleted = None
                    self._numberTestsTotal = None
                    self._state = None
                    self._stateDetail = None
                    self._stateDetailLastModifiedDate = None
                    self._statusCode = None
                    return
            Holder.__name__ = "AsyncResult_Holder"
            self.pyclass = Holder

    class AsyncRequestState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AsyncRequestState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeployResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DeployResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DeployResult_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ID",lazy=False)(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DeployMessage",lazy=False)(pname=(ns,"messages"), aname="_messages", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RetrieveResult",lazy=False)(pname=(ns,"retrieveResult"), aname="_retrieveResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RunTestsResult",lazy=False)(pname=(ns,"runTestResult"), aname="_runTestResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"success"), aname="_success", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._messages = []
                    self._retrieveResult = None
                    self._runTestResult = None
                    self._success = None
                    return
            Holder.__name__ = "DeployResult_Holder"
            self.pyclass = Holder

    class DeployMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DeployMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DeployMessage_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"changed"), aname="_changed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"columnNumber"), aname="_columnNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"created"), aname="_created", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"deleted"), aname="_deleted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fileName"), aname="_fileName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fullName"), aname="_fullName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"lineNumber"), aname="_lineNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"problem"), aname="_problem", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DeployProblemType",lazy=False)(pname=(ns,"problemType"), aname="_problemType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"success"), aname="_success", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._changed = None
                    self._columnNumber = None
                    self._created = None
                    self._deleted = None
                    self._fileName = None
                    self._fullName = None
                    self._id = None
                    self._lineNumber = None
                    self._problem = None
                    self._problemType = None
                    self._success = None
                    return
            Holder.__name__ = "DeployMessage_Holder"
            self.pyclass = Holder

    class RetrieveResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RetrieveResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RetrieveResult_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FileProperties",lazy=False)(pname=(ns,"fileProperties"), aname="_fileProperties", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RetrieveMessage",lazy=False)(pname=(ns,"messages"), aname="_messages", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"zipFile"), aname="_zipFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fileProperties = []
                    self._id = None
                    self._messages = []
                    self._zipFile = None
                    return
            Holder.__name__ = "RetrieveResult_Holder"
            self.pyclass = Holder

    class FileProperties_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FileProperties")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FileProperties_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"createdById"), aname="_createdById", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"createdByName"), aname="_createdByName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"createdDate"), aname="_createdDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fileName"), aname="_fileName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fullName"), aname="_fullName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastModifiedById"), aname="_lastModifiedById", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lastModifiedByName"), aname="_lastModifiedByName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"lastModifiedDate"), aname="_lastModifiedDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ManageableState",lazy=False)(pname=(ns,"manageableState"), aname="_manageableState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"namespacePrefix"), aname="_namespacePrefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._createdById = None
                    self._createdByName = None
                    self._createdDate = None
                    self._fileName = None
                    self._fullName = None
                    self._id = None
                    self._lastModifiedById = None
                    self._lastModifiedByName = None
                    self._lastModifiedDate = None
                    self._manageableState = None
                    self._namespacePrefix = None
                    self._type = None
                    return
            Holder.__name__ = "FileProperties_Holder"
            self.pyclass = Holder

    class ManageableState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ManageableState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RetrieveMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RetrieveMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RetrieveMessage_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fileName"), aname="_fileName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"problem"), aname="_problem", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fileName = None
                    self._problem = None
                    return
            Holder.__name__ = "RetrieveMessage_Holder"
            self.pyclass = Holder

    class RunTestsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RunTestsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RunTestsResult_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CodeCoverageResult",lazy=False)(pname=(ns,"codeCoverage"), aname="_codeCoverage", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CodeCoverageWarning",lazy=False)(pname=(ns,"codeCoverageWarnings"), aname="_codeCoverageWarnings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RunTestFailure",lazy=False)(pname=(ns,"failures"), aname="_failures", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numFailures"), aname="_numFailures", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numTestsRun"), aname="_numTestsRun", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RunTestSuccess",lazy=False)(pname=(ns,"successes"), aname="_successes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"totalTime"), aname="_totalTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._codeCoverage = []
                    self._codeCoverageWarnings = []
                    self._failures = []
                    self._numFailures = None
                    self._numTestsRun = None
                    self._successes = []
                    self._totalTime = None
                    return
            Holder.__name__ = "RunTestsResult_Holder"
            self.pyclass = Holder

    class CodeCoverageResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CodeCoverageResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CodeCoverageResult_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CodeLocation",lazy=False)(pname=(ns,"dmlInfo"), aname="_dmlInfo", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ID",lazy=False)(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CodeLocation",lazy=False)(pname=(ns,"locationsNotCovered"), aname="_locationsNotCovered", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CodeLocation",lazy=False)(pname=(ns,"methodInfo"), aname="_methodInfo", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"namespace"), aname="_namespace", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numLocations"), aname="_numLocations", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numLocationsNotCovered"), aname="_numLocationsNotCovered", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CodeLocation",lazy=False)(pname=(ns,"soqlInfo"), aname="_soqlInfo", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CodeLocation",lazy=False)(pname=(ns,"soslInfo"), aname="_soslInfo", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dmlInfo = []
                    self._id = None
                    self._locationsNotCovered = []
                    self._methodInfo = []
                    self._name = None
                    self._namespace = None
                    self._numLocations = None
                    self._numLocationsNotCovered = None
                    self._soqlInfo = []
                    self._soslInfo = []
                    self._type = None
                    return
            Holder.__name__ = "CodeCoverageResult_Holder"
            self.pyclass = Holder

    class CodeLocation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CodeLocation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CodeLocation_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"column"), aname="_column", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"line"), aname="_line", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numExecutions"), aname="_numExecutions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"time"), aname="_time", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._column = None
                    self._line = None
                    self._numExecutions = None
                    self._time = None
                    return
            Holder.__name__ = "CodeLocation_Holder"
            self.pyclass = Holder

    class CodeCoverageWarning_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CodeCoverageWarning")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CodeCoverageWarning_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ID",lazy=False)(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"namespace"), aname="_namespace", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._message = None
                    self._name = None
                    self._namespace = None
                    return
            Holder.__name__ = "CodeCoverageWarning_Holder"
            self.pyclass = Holder

    class RunTestFailure_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RunTestFailure")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RunTestFailure_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ID",lazy=False)(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"methodName"), aname="_methodName", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"namespace"), aname="_namespace", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"packageName"), aname="_packageName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"stackTrace"), aname="_stackTrace", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"time"), aname="_time", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._message = None
                    self._methodName = None
                    self._name = None
                    self._namespace = None
                    self._packageName = None
                    self._stackTrace = None
                    self._time = None
                    self._type = None
                    return
            Holder.__name__ = "RunTestFailure_Holder"
            self.pyclass = Holder

    class RunTestSuccess_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RunTestSuccess")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RunTestSuccess_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ID",lazy=False)(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"methodName"), aname="_methodName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"namespace"), aname="_namespace", minOccurs=1, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"time"), aname="_time", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._methodName = None
                    self._name = None
                    self._namespace = None
                    self._time = None
                    return
            Holder.__name__ = "RunTestSuccess_Holder"
            self.pyclass = Holder

    class DescribeMetadataResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DescribeMetadataResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DescribeMetadataResult_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","DescribeMetadataObject",lazy=False)(pname=(ns,"metadataObjects"), aname="_metadataObjects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"organizationNamespace"), aname="_organizationNamespace", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"partialSaveAllowed"), aname="_partialSaveAllowed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"testRequired"), aname="_testRequired", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._metadataObjects = []
                    self._organizationNamespace = None
                    self._partialSaveAllowed = None
                    self._testRequired = None
                    return
            Holder.__name__ = "DescribeMetadataResult_Holder"
            self.pyclass = Holder

    class DescribeMetadataObject_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DescribeMetadataObject")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DescribeMetadataObject_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"childXmlNames"), aname="_childXmlNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"directoryName"), aname="_directoryName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"inFolder"), aname="_inFolder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"metaFile"), aname="_metaFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"suffix"), aname="_suffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"xmlName"), aname="_xmlName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._childXmlNames = []
                    self._directoryName = None
                    self._inFolder = None
                    self._metaFile = None
                    self._suffix = None
                    self._xmlName = None
                    return
            Holder.__name__ = "DescribeMetadataObject_Holder"
            self.pyclass = Holder

    class SharedTo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SharedTo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SharedTo_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"allCustomerPortalUsers"), aname="_allCustomerPortalUsers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"allInternalUsers"), aname="_allInternalUsers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"allPartnerUsers"), aname="_allPartnerUsers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"group"), aname="_group", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groups"), aname="_groups", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"portalRole"), aname="_portalRole", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"portalRoleAndSubordinates"), aname="_portalRoleAndSubordinates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"queue"), aname="_queue", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"role"), aname="_role", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"roleAndSubordinates"), aname="_roleAndSubordinates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"roleAndSubordinatesInternal"), aname="_roleAndSubordinatesInternal", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"roles"), aname="_roles", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rolesAndSubordinates"), aname="_rolesAndSubordinates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"territories"), aname="_territories", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"territoriesAndSubordinates"), aname="_territoriesAndSubordinates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"territory"), aname="_territory", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"territoryAndSubordinates"), aname="_territoryAndSubordinates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._allCustomerPortalUsers = None
                    self._allInternalUsers = None
                    self._allPartnerUsers = None
                    self._group = []
                    self._groups = []
                    self._portalRole = []
                    self._portalRoleAndSubordinates = []
                    self._queue = []
                    self._role = []
                    self._roleAndSubordinates = []
                    self._roleAndSubordinatesInternal = []
                    self._roles = []
                    self._rolesAndSubordinates = []
                    self._territories = []
                    self._territoriesAndSubordinates = []
                    self._territory = []
                    self._territoryAndSubordinates = []
                    return
            Holder.__name__ = "SharedTo_Holder"
            self.pyclass = Holder

    class CustomLabels_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomLabels")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomLabels_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CustomLabel",lazy=False)(pname=(ns,"labels"), aname="_labels", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CustomLabels_Def.__bases__:
                bases = list(ns0.CustomLabels_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CustomLabels_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomLabel_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomLabel")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomLabel_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"categories"), aname="_categories", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"language"), aname="_language", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"protected"), aname="_protected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"shortDescription"), aname="_shortDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CustomLabel_Def.__bases__:
                bases = list(ns0.CustomLabel_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CustomLabel_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class StaticResource_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "StaticResource")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StaticResource_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","StaticResourceCacheControl",lazy=False)(pname=(ns,"cacheControl"), aname="_cacheControl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"contentType"), aname="_contentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MetadataWithContent_Def not in ns0.StaticResource_Def.__bases__:
                bases = list(ns0.StaticResource_Def.__bases__)
                bases.insert(0, ns0.MetadataWithContent_Def)
                ns0.StaticResource_Def.__bases__ = tuple(bases)

            ns0.MetadataWithContent_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class StaticResourceCacheControl_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "StaticResourceCacheControl")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Scontrol_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Scontrol")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Scontrol_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","SControlContentSource",lazy=False)(pname=(ns,"contentSource"), aname="_contentSource", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Encoding",lazy=False)(pname=(ns,"encodingKey"), aname="_encodingKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"fileContent"), aname="_fileContent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fileName"), aname="_fileName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"supportsCaching"), aname="_supportsCaching", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MetadataWithContent_Def not in ns0.Scontrol_Def.__bases__:
                bases = list(ns0.Scontrol_Def.__bases__)
                bases.insert(0, ns0.MetadataWithContent_Def)
                ns0.Scontrol_Def.__bases__ = tuple(bases)

            ns0.MetadataWithContent_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SControlContentSource_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SControlContentSource")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Encoding_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Encoding")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ApexComponent_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ApexComponent")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApexComponent_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"apiVersion"), aname="_apiVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PackageVersion",lazy=False)(pname=(ns,"packageVersions"), aname="_packageVersions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MetadataWithContent_Def not in ns0.ApexComponent_Def.__bases__:
                bases = list(ns0.ApexComponent_Def.__bases__)
                bases.insert(0, ns0.MetadataWithContent_Def)
                ns0.ApexComponent_Def.__bases__ = tuple(bases)

            ns0.MetadataWithContent_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PackageVersion_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PackageVersion")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PackageVersion_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"majorNumber"), aname="_majorNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"minorNumber"), aname="_minorNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"namespace"), aname="_namespace", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._majorNumber = None
                    self._minorNumber = None
                    self._namespace = None
                    return
            Holder.__name__ = "PackageVersion_Holder"
            self.pyclass = Holder

    class ApexPage_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ApexPage")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApexPage_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"apiVersion"), aname="_apiVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"availableInTouch"), aname="_availableInTouch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PackageVersion",lazy=False)(pname=(ns,"packageVersions"), aname="_packageVersions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MetadataWithContent_Def not in ns0.ApexPage_Def.__bases__:
                bases = list(ns0.ApexPage_Def.__bases__)
                bases.insert(0, ns0.MetadataWithContent_Def)
                ns0.ApexPage_Def.__bases__ = tuple(bases)

            ns0.MetadataWithContent_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Queue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Queue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Queue_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"doesSendEmailToMembers"), aname="_doesSendEmailToMembers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"email"), aname="_email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","QueueSobject",lazy=False)(pname=(ns,"queueSobject"), aname="_queueSobject", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Queue_Def.__bases__:
                bases = list(ns0.Queue_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Queue_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QueueSobject_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "QueueSobject")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.QueueSobject_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"sobjectType"), aname="_sobjectType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sobjectType = None
                    return
            Holder.__name__ = "QueueSobject_Holder"
            self.pyclass = Holder

    class CustomDataType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomDataType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomDataType_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CustomDataTypeComponent",lazy=False)(pname=(ns,"customDataTypeComponents"), aname="_customDataTypeComponents", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"displayFormula"), aname="_displayFormula", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"editComponentsOnSeparateLines"), aname="_editComponentsOnSeparateLines", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"rightAligned"), aname="_rightAligned", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"supportComponentsInReports"), aname="_supportComponentsInReports", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CustomDataType_Def.__bases__:
                bases = list(ns0.CustomDataType_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CustomDataType_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomDataTypeComponent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomDataTypeComponent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomDataTypeComponent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"developerSuffix"), aname="_developerSuffix", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enforceFieldRequiredness"), aname="_enforceFieldRequiredness", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"length"), aname="_length", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"precision"), aname="_precision", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"scale"), aname="_scale", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SortOrder",lazy=False)(pname=(ns,"sortOrder"), aname="_sortOrder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"sortPriority"), aname="_sortPriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FieldType",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._developerSuffix = None
                    self._enforceFieldRequiredness = None
                    self._label = None
                    self._length = None
                    self._precision = None
                    self._scale = None
                    self._sortOrder = None
                    self._sortPriority = None
                    self._type = None
                    return
            Holder.__name__ = "CustomDataTypeComponent_Holder"
            self.pyclass = Holder

    class SearchLayouts_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SearchLayouts")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SearchLayouts_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"customTabListAdditionalFields"), aname="_customTabListAdditionalFields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"excludedStandardButtons"), aname="_excludedStandardButtons", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"listViewButtons"), aname="_listViewButtons", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lookupDialogsAdditionalFields"), aname="_lookupDialogsAdditionalFields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lookupFilterFields"), aname="_lookupFilterFields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lookupPhoneDialogsAdditionalFields"), aname="_lookupPhoneDialogsAdditionalFields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"searchFilterFields"), aname="_searchFilterFields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"searchResultsAdditionalFields"), aname="_searchResultsAdditionalFields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"searchResultsCustomButtons"), aname="_searchResultsCustomButtons", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customTabListAdditionalFields = []
                    self._excludedStandardButtons = []
                    self._listViewButtons = []
                    self._lookupDialogsAdditionalFields = []
                    self._lookupFilterFields = []
                    self._lookupPhoneDialogsAdditionalFields = []
                    self._searchFilterFields = []
                    self._searchResultsAdditionalFields = []
                    self._searchResultsCustomButtons = []
                    return
            Holder.__name__ = "SearchLayouts_Holder"
            self.pyclass = Holder

    class ListViewFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ListViewFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListViewFilter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FilterOperation",lazy=False)(pname=(ns,"operation"), aname="_operation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._field = None
                    self._operation = None
                    self._value = None
                    return
            Holder.__name__ = "ListViewFilter_Holder"
            self.pyclass = Holder

    class ArticleTypeChannelDisplay_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ArticleTypeChannelDisplay")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArticleTypeChannelDisplay_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ArticleTypeTemplate",lazy=False)(pname=(ns,"articleTypeTemplates"), aname="_articleTypeTemplates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._articleTypeTemplates = []
                    return
            Holder.__name__ = "ArticleTypeChannelDisplay_Holder"
            self.pyclass = Holder

    class ArticleTypeTemplate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ArticleTypeTemplate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArticleTypeTemplate_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","Channel",lazy=False)(pname=(ns,"channel"), aname="_channel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"page"), aname="_page", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Template",lazy=False)(pname=(ns,"template"), aname="_template", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._channel = None
                    self._page = None
                    self._template = None
                    return
            Holder.__name__ = "ArticleTypeTemplate_Holder"
            self.pyclass = Holder

    class ExternalDataSourceType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ExternalDataSourceType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ExternalPrincipalType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ExternalPrincipalType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthenticationProtocol_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AuthenticationProtocol")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ExternalDataSource_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ExternalDataSource")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ExternalDataSource_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"certificate"), aname="_certificate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endpoint"), aname="_endpoint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ExternalPrincipalType",lazy=False)(pname=(ns,"principalType"), aname="_principalType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","AuthenticationProtocol",lazy=False)(pname=(ns,"protocol"), aname="_protocol", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"repository"), aname="_repository", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ExternalDataSourceType",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"version"), aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.ExternalDataSource_Def.__bases__:
                bases = list(ns0.ExternalDataSource_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.ExternalDataSource_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomObject_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomObject")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomObject_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ActionOverride",lazy=False)(pname=(ns,"actionOverrides"), aname="_actionOverrides", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ArticleTypeChannelDisplay",lazy=False)(pname=(ns,"articleTypeChannelDisplay"), aname="_articleTypeChannelDisplay", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","BusinessProcess",lazy=False)(pname=(ns,"businessProcesses"), aname="_businessProcesses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"customHelp"), aname="_customHelp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"customHelpPage"), aname="_customHelpPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CustomSettingsType",lazy=False)(pname=(ns,"customSettingsType"), aname="_customSettingsType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CustomSettingsVisibility",lazy=False)(pname=(ns,"customSettingsVisibility"), aname="_customSettingsVisibility", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DeploymentStatus",lazy=False)(pname=(ns,"deploymentStatus"), aname="_deploymentStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"deprecated"), aname="_deprecated", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableActivities"), aname="_enableActivities", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableDivisions"), aname="_enableDivisions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableEnhancedLookup"), aname="_enableEnhancedLookup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableFeeds"), aname="_enableFeeds", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableHistory"), aname="_enableHistory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableReports"), aname="_enableReports", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FieldSet",lazy=False)(pname=(ns,"fieldSets"), aname="_fieldSets", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CustomField",lazy=False)(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Gender",lazy=False)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"household"), aname="_household", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ListView",lazy=False)(pname=(ns,"listViews"), aname="_listViews", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CustomField",lazy=False)(pname=(ns,"nameField"), aname="_nameField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","NamedFilter",lazy=False)(pname=(ns,"namedFilters"), aname="_namedFilters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pluralLabel"), aname="_pluralLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"recordTypeTrackFeedHistory"), aname="_recordTypeTrackFeedHistory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"recordTypeTrackHistory"), aname="_recordTypeTrackHistory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RecordType",lazy=False)(pname=(ns,"recordTypes"), aname="_recordTypes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SearchLayouts",lazy=False)(pname=(ns,"searchLayouts"), aname="_searchLayouts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SharingModel",lazy=False)(pname=(ns,"sharingModel"), aname="_sharingModel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SharingReason",lazy=False)(pname=(ns,"sharingReasons"), aname="_sharingReasons", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SharingRecalculation",lazy=False)(pname=(ns,"sharingRecalculations"), aname="_sharingRecalculations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","StartsWith",lazy=False)(pname=(ns,"startsWith"), aname="_startsWith", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ValidationRule",lazy=False)(pname=(ns,"validationRules"), aname="_validationRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WebLink",lazy=False)(pname=(ns,"webLinks"), aname="_webLinks", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CustomObject_Def.__bases__:
                bases = list(ns0.CustomObject_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CustomObject_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ActionOverride_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ActionOverride")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ActionOverride_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"actionName"), aname="_actionName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"comment"), aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"content"), aname="_content", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"skipRecordTypeSelect"), aname="_skipRecordTypeSelect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ActionOverrideType",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._actionName = None
                    self._comment = None
                    self._content = None
                    self._skipRecordTypeSelect = None
                    self._type = None
                    return
            Holder.__name__ = "ActionOverride_Holder"
            self.pyclass = Holder

    class ActionOverrideType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ActionOverrideType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BusinessProcess_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "BusinessProcess")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BusinessProcess_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isActive"), aname="_isActive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PicklistValue",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.BusinessProcess_Def.__bases__:
                bases = list(ns0.BusinessProcess_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.BusinessProcess_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PicklistValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PicklistValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PicklistValue_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"allowEmail"), aname="_allowEmail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"closed"), aname="_closed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"color"), aname="_color", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"controllingFieldValues"), aname="_controllingFieldValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"converted"), aname="_converted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"cssExposed"), aname="_cssExposed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"default"), aname="_default", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ForecastCategories",lazy=False)(pname=(ns,"forecastCategory"), aname="_forecastCategory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"highPriority"), aname="_highPriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"probability"), aname="_probability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reverseRole"), aname="_reverseRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"reviewed"), aname="_reviewed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"won"), aname="_won", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.PicklistValue_Def.__bases__:
                bases = list(ns0.PicklistValue_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.PicklistValue_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FieldSet_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FieldSet")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FieldSet_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FieldSetItem",lazy=False)(pname=(ns,"availableFields"), aname="_availableFields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FieldSetItem",lazy=False)(pname=(ns,"displayedFields"), aname="_displayedFields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.FieldSet_Def.__bases__:
                bases = list(ns0.FieldSet_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.FieldSet_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FieldSetItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FieldSetItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FieldSetItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isRequired"), aname="_isRequired", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._field = None
                    self._isRequired = None
                    return
            Holder.__name__ = "FieldSetItem_Holder"
            self.pyclass = Holder

    class CustomField_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomField")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomField_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"caseSensitive"), aname="_caseSensitive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"customDataType"), aname="_customDataType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultValue"), aname="_defaultValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DeleteConstraint",lazy=False)(pname=(ns,"deleteConstraint"), aname="_deleteConstraint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"deprecated"), aname="_deprecated", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"displayFormat"), aname="_displayFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"escapeMarkup"), aname="_escapeMarkup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalDeveloperName"), aname="_externalDeveloperName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"externalId"), aname="_externalId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"formula"), aname="_formula", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","TreatBlanksAs",lazy=False)(pname=(ns,"formulaTreatBlanksAs"), aname="_formulaTreatBlanksAs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"inlineHelpText"), aname="_inlineHelpText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isFilteringDisabled"), aname="_isFilteringDisabled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isNameField"), aname="_isNameField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isSortingDisabled"), aname="_isSortingDisabled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"length"), aname="_length", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EncryptedFieldMaskChar",lazy=False)(pname=(ns,"maskChar"), aname="_maskChar", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EncryptedFieldMaskType",lazy=False)(pname=(ns,"maskType"), aname="_maskType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Picklist",lazy=False)(pname=(ns,"picklist"), aname="_picklist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"populateExistingRows"), aname="_populateExistingRows", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"precision"), aname="_precision", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"referenceTo"), aname="_referenceTo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relationshipLabel"), aname="_relationshipLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relationshipName"), aname="_relationshipName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"relationshipOrder"), aname="_relationshipOrder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"reparentableMasterDetail"), aname="_reparentableMasterDetail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"required"), aname="_required", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"restrictedAdminField"), aname="_restrictedAdminField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"scale"), aname="_scale", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"startingNumber"), aname="_startingNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"stripMarkup"), aname="_stripMarkup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"summarizedField"), aname="_summarizedField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FilterItem",lazy=False)(pname=(ns,"summaryFilterItems"), aname="_summaryFilterItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"summaryForeignKey"), aname="_summaryForeignKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SummaryOperations",lazy=False)(pname=(ns,"summaryOperation"), aname="_summaryOperation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"trackFeedHistory"), aname="_trackFeedHistory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"trackHistory"), aname="_trackHistory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FieldType",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"unique"), aname="_unique", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"visibleLines"), aname="_visibleLines", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"writeRequiresMasterRead"), aname="_writeRequiresMasterRead", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CustomField_Def.__bases__:
                bases = list(ns0.CustomField_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CustomField_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EncryptedFieldMaskChar_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EncryptedFieldMaskChar")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EncryptedFieldMaskType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EncryptedFieldMaskType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Picklist_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Picklist")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Picklist_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"controllingField"), aname="_controllingField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PicklistValue",lazy=False)(pname=(ns,"picklistValues"), aname="_picklistValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"sorted"), aname="_sorted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._controllingField = None
                    self._picklistValues = []
                    self._sorted = None
                    return
            Holder.__name__ = "Picklist_Holder"
            self.pyclass = Holder

    class FilterItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FilterItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FilterItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FilterOperation",lazy=False)(pname=(ns,"operation"), aname="_operation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"valueField"), aname="_valueField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._field = None
                    self._operation = None
                    self._value = None
                    self._valueField = None
                    return
            Holder.__name__ = "FilterItem_Holder"
            self.pyclass = Holder

    class SummaryOperations_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SummaryOperations")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ListView_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ListView")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ListView_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"columns"), aname="_columns", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"division"), aname="_division", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FilterScope",lazy=False)(pname=(ns,"filterScope"), aname="_filterScope", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ListViewFilter",lazy=False)(pname=(ns,"filters"), aname="_filters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Language",lazy=False)(pname=(ns,"language"), aname="_language", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"queue"), aname="_queue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SharedTo",lazy=False)(pname=(ns,"sharedTo"), aname="_sharedTo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.ListView_Def.__bases__:
                bases = list(ns0.ListView_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.ListView_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Language_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Language")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NamedFilter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "NamedFilter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NamedFilter_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorMessage"), aname="_errorMessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FilterItem",lazy=False)(pname=(ns,"filterItems"), aname="_filterItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"infoMessage"), aname="_infoMessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isOptional"), aname="_isOptional", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sourceObject"), aname="_sourceObject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.NamedFilter_Def.__bases__:
                bases = list(ns0.NamedFilter_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.NamedFilter_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RecordType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RecordType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RecordType_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"businessProcess"), aname="_businessProcess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RecordTypePicklistValue",lazy=False)(pname=(ns,"picklistValues"), aname="_picklistValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.RecordType_Def.__bases__:
                bases = list(ns0.RecordType_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.RecordType_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RecordTypePicklistValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RecordTypePicklistValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RecordTypePicklistValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"picklist"), aname="_picklist", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PicklistValue",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._picklist = None
                    self._values = []
                    return
            Holder.__name__ = "RecordTypePicklistValue_Holder"
            self.pyclass = Holder

    class SharingReason_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SharingReason")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SharingReason_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.SharingReason_Def.__bases__:
                bases = list(ns0.SharingReason_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.SharingReason_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SharingRecalculation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SharingRecalculation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SharingRecalculation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"className"), aname="_className", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._className = None
                    return
            Holder.__name__ = "SharingRecalculation_Holder"
            self.pyclass = Holder

    class ValidationRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ValidationRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ValidationRule_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorConditionFormula"), aname="_errorConditionFormula", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorDisplayField"), aname="_errorDisplayField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorMessage"), aname="_errorMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.ValidationRule_Def.__bases__:
                bases = list(ns0.ValidationRule_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.ValidationRule_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WebLink_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WebLink")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WebLink_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","WebLinkAvailability",lazy=False)(pname=(ns,"availability"), aname="_availability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WebLinkDisplayType",lazy=False)(pname=(ns,"displayType"), aname="_displayType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Encoding",lazy=False)(pname=(ns,"encodingKey"), aname="_encodingKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"hasMenubar"), aname="_hasMenubar", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"hasScrollbars"), aname="_hasScrollbars", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"hasToolbar"), aname="_hasToolbar", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"height"), aname="_height", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isResizable"), aname="_isResizable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WebLinkType",lazy=False)(pname=(ns,"linkType"), aname="_linkType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"masterLabel"), aname="_masterLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WebLinkWindowType",lazy=False)(pname=(ns,"openType"), aname="_openType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"page"), aname="_page", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WebLinkPosition",lazy=False)(pname=(ns,"position"), aname="_position", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"protected"), aname="_protected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"requireRowSelection"), aname="_requireRowSelection", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"scontrol"), aname="_scontrol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showsLocation"), aname="_showsLocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showsStatus"), aname="_showsStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"width"), aname="_width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.WebLink_Def.__bases__:
                bases = list(ns0.WebLink_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.WebLink_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WebLinkAvailability_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WebLinkAvailability")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WebLinkType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WebLinkType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WebLinkWindowType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WebLinkWindowType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WebLinkPosition_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WebLinkPosition")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UserDateGranularity_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "UserDateGranularity")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CurrencyIsoCode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CurrencyIsoCode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReportTypeCategory_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportTypeCategory")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ObjectRelationship_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ObjectRelationship")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ObjectRelationship_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ObjectRelationship",lazy=False)(pname=(ns,"join"), aname="_join", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"outerJoin"), aname="_outerJoin", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relationship"), aname="_relationship", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._join = None
                    self._outerJoin = None
                    self._relationship = None
                    return
            Holder.__name__ = "ObjectRelationship_Holder"
            self.pyclass = Holder

    class ReportTypeColumn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportTypeColumn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportTypeColumn_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"checkedByDefault"), aname="_checkedByDefault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"displayNameOverride"), aname="_displayNameOverride", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"table"), aname="_table", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._checkedByDefault = None
                    self._displayNameOverride = None
                    self._field = None
                    self._table = None
                    return
            Holder.__name__ = "ReportTypeColumn_Holder"
            self.pyclass = Holder

    class ReportLayoutSection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportLayoutSection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportLayoutSection_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportTypeColumn",lazy=False)(pname=(ns,"columns"), aname="_columns", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"masterLabel"), aname="_masterLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._columns = []
                    self._masterLabel = None
                    return
            Holder.__name__ = "ReportLayoutSection_Holder"
            self.pyclass = Holder

    class ReportType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ReportType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"baseObject"), aname="_baseObject", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportTypeCategory",lazy=False)(pname=(ns,"category"), aname="_category", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"deployed"), aname="_deployed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ObjectRelationship",lazy=False)(pname=(ns,"join"), aname="_join", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportLayoutSection",lazy=False)(pname=(ns,"sections"), aname="_sections", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.ReportType_Def.__bases__:
                bases = list(ns0.ReportType_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.ReportType_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReportSummaryType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportSummaryType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReportAggregate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportAggregate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportAggregate_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"acrossGroupingContext"), aname="_acrossGroupingContext", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"calculatedFormula"), aname="_calculatedFormula", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportAggregateDatatype",lazy=False)(pname=(ns,"datatype"), aname="_datatype", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"developerName"), aname="_developerName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"downGroupingContext"), aname="_downGroupingContext", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isActive"), aname="_isActive", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isCrossBlock"), aname="_isCrossBlock", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"masterLabel"), aname="_masterLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reportType"), aname="_reportType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"scale"), aname="_scale", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._acrossGroupingContext = None
                    self._calculatedFormula = None
                    self._datatype = None
                    self._description = None
                    self._developerName = None
                    self._downGroupingContext = None
                    self._isActive = None
                    self._isCrossBlock = None
                    self._masterLabel = None
                    self._reportType = None
                    self._scale = None
                    return
            Holder.__name__ = "ReportAggregate_Holder"
            self.pyclass = Holder

    class ReportGrouping_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportGrouping")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportGrouping_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","UserDateGranularity",lazy=False)(pname=(ns,"dateGranularity"), aname="_dateGranularity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SortOrder",lazy=False)(pname=(ns,"sortOrder"), aname="_sortOrder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dateGranularity = None
                    self._field = None
                    self._sortOrder = None
                    return
            Holder.__name__ = "ReportGrouping_Holder"
            self.pyclass = Holder

    class ReportColorRange_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportColorRange")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportColorRange_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportSummaryType",lazy=False)(pname=(ns,"aggregate"), aname="_aggregate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"columnName"), aname="_columnName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"highBreakpoint"), aname="_highBreakpoint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"highColor"), aname="_highColor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"lowBreakpoint"), aname="_lowBreakpoint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lowColor"), aname="_lowColor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"midColor"), aname="_midColor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aggregate = None
                    self._columnName = None
                    self._highBreakpoint = None
                    self._highColor = None
                    self._lowBreakpoint = None
                    self._lowColor = None
                    self._midColor = None
                    return
            Holder.__name__ = "ReportColorRange_Holder"
            self.pyclass = Holder

    class ReportColumn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportColumn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportColumn_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportSummaryType",lazy=False)(pname=(ns,"aggregateTypes"), aname="_aggregateTypes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aggregateTypes = []
                    self._field = None
                    return
            Holder.__name__ = "ReportColumn_Holder"
            self.pyclass = Holder

    class ReportFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportFilter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportFilterItem",lazy=False)(pname=(ns,"criteriaItems"), aname="_criteriaItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Language",lazy=False)(pname=(ns,"language"), aname="_language", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._booleanFilter = None
                    self._criteriaItems = []
                    self._language = None
                    return
            Holder.__name__ = "ReportFilter_Holder"
            self.pyclass = Holder

    class ReportFilterItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportFilterItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportFilterItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"column"), aname="_column", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FilterOperation",lazy=False)(pname=(ns,"operator"), aname="_operator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._column = None
                    self._operator = None
                    self._value = None
                    return
            Holder.__name__ = "ReportFilterItem_Holder"
            self.pyclass = Holder

    class ReportTimeFrameFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportTimeFrameFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportTimeFrameFilter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"dateColumn"), aname="_dateColumn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"endDate"), aname="_endDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","UserDateInterval",lazy=False)(pname=(ns,"interval"), aname="_interval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"startDate"), aname="_startDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dateColumn = None
                    self._endDate = None
                    self._interval = None
                    self._startDate = None
                    return
            Holder.__name__ = "ReportTimeFrameFilter_Holder"
            self.pyclass = Holder

    class ReportParam_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportParam")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportParam_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "ReportParam_Holder"
            self.pyclass = Holder

    class ReportFormat_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportFormat")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Report_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Report")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Report_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportAggregate",lazy=False)(pname=(ns,"aggregates"), aname="_aggregates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Report",lazy=False)(pname=(ns,"block"), aname="_block", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportBlockInfo",lazy=False)(pname=(ns,"blockInfo"), aname="_blockInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportBucketField",lazy=False)(pname=(ns,"buckets"), aname="_buckets", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportChart",lazy=False)(pname=(ns,"chart"), aname="_chart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportColorRange",lazy=False)(pname=(ns,"colorRanges"), aname="_colorRanges", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportColumn",lazy=False)(pname=(ns,"columns"), aname="_columns", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportCrossFilter",lazy=False)(pname=(ns,"crossFilters"), aname="_crossFilters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CurrencyIsoCode",lazy=False)(pname=(ns,"currency"), aname="_currency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"division"), aname="_division", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportFilter",lazy=False)(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportFormat",lazy=False)(pname=(ns,"format"), aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportGrouping",lazy=False)(pname=(ns,"groupingsAcross"), aname="_groupingsAcross", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportGrouping",lazy=False)(pname=(ns,"groupingsDown"), aname="_groupingsDown", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportParam",lazy=False)(pname=(ns,"params"), aname="_params", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reportType"), aname="_reportType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"roleHierarchyFilter"), aname="_roleHierarchyFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"rowLimit"), aname="_rowLimit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"scope"), aname="_scope", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showDetails"), aname="_showDetails", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sortColumn"), aname="_sortColumn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SortOrder",lazy=False)(pname=(ns,"sortOrder"), aname="_sortOrder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"territoryHierarchyFilter"), aname="_territoryHierarchyFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportTimeFrameFilter",lazy=False)(pname=(ns,"timeFrameFilter"), aname="_timeFrameFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userFilter"), aname="_userFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Report_Def.__bases__:
                bases = list(ns0.Report_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Report_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReportBlockInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportBlockInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportBlockInfo_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportAggregateReference",lazy=False)(pname=(ns,"aggregateReferences"), aname="_aggregateReferences", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"blockId"), aname="_blockId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"joinTable"), aname="_joinTable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aggregateReferences = []
                    self._blockId = None
                    self._joinTable = None
                    return
            Holder.__name__ = "ReportBlockInfo_Holder"
            self.pyclass = Holder

    class ReportAggregateReference_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportAggregateReference")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportAggregateReference_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"aggregate"), aname="_aggregate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aggregate = None
                    return
            Holder.__name__ = "ReportAggregateReference_Holder"
            self.pyclass = Holder

    class ReportBucketField_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportBucketField")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportBucketField_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportBucketFieldType",lazy=False)(pname=(ns,"bucketType"), aname="_bucketType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"developerName"), aname="_developerName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"masterLabel"), aname="_masterLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportBucketFieldNullTreatment",lazy=False)(pname=(ns,"nullTreatment"), aname="_nullTreatment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"otherBucketLabel"), aname="_otherBucketLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sourceColumnName"), aname="_sourceColumnName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"useOther"), aname="_useOther", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportBucketFieldValue",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bucketType = None
                    self._developerName = None
                    self._masterLabel = None
                    self._nullTreatment = None
                    self._otherBucketLabel = None
                    self._sourceColumnName = None
                    self._useOther = None
                    self._values = []
                    return
            Holder.__name__ = "ReportBucketField_Holder"
            self.pyclass = Holder

    class ReportBucketFieldType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportBucketFieldType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReportBucketFieldNullTreatment_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportBucketFieldNullTreatment")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReportBucketFieldValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportBucketFieldValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportBucketFieldValue_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportBucketFieldSourceValue",lazy=False)(pname=(ns,"sourceValues"), aname="_sourceValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sourceValues = []
                    self._value = None
                    return
            Holder.__name__ = "ReportBucketFieldValue_Holder"
            self.pyclass = Holder

    class ReportBucketFieldSourceValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportBucketFieldSourceValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportBucketFieldSourceValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"from"), aname="_from", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sourceValue"), aname="_sourceValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"to"), aname="_to", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._from = None
                    self._sourceValue = None
                    self._to = None
                    return
            Holder.__name__ = "ReportBucketFieldSourceValue_Holder"
            self.pyclass = Holder

    class ReportChart_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportChart")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportChart_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"backgroundColor1"), aname="_backgroundColor1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"backgroundColor2"), aname="_backgroundColor2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartBackgroundDirection",lazy=False)(pname=(ns,"backgroundFadeDir"), aname="_backgroundFadeDir", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartSummary",lazy=False)(pname=(ns,"chartSummaries"), aname="_chartSummaries", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartType",lazy=False)(pname=(ns,"chartType"), aname="_chartType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableHoverLabels"), aname="_enableHoverLabels", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"expandOthers"), aname="_expandOthers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupingColumn"), aname="_groupingColumn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartLegendPosition",lazy=False)(pname=(ns,"legendPosition"), aname="_legendPosition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartPosition",lazy=False)(pname=(ns,"location"), aname="_location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"secondaryGroupingColumn"), aname="_secondaryGroupingColumn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showAxisLabels"), aname="_showAxisLabels", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showPercentage"), aname="_showPercentage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showTotal"), aname="_showTotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showValues"), aname="_showValues", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportChartSize",lazy=False)(pname=(ns,"size"), aname="_size", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"summaryAxisManualRangeEnd"), aname="_summaryAxisManualRangeEnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"summaryAxisManualRangeStart"), aname="_summaryAxisManualRangeStart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartRangeType",lazy=False)(pname=(ns,"summaryAxisRange"), aname="_summaryAxisRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textColor"), aname="_textColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"textSize"), aname="_textSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"titleColor"), aname="_titleColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"titleSize"), aname="_titleSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._backgroundColor1 = None
                    self._backgroundColor2 = None
                    self._backgroundFadeDir = None
                    self._chartSummaries = []
                    self._chartType = None
                    self._enableHoverLabels = None
                    self._expandOthers = None
                    self._groupingColumn = None
                    self._legendPosition = None
                    self._location = None
                    self._secondaryGroupingColumn = None
                    self._showAxisLabels = None
                    self._showPercentage = None
                    self._showTotal = None
                    self._showValues = None
                    self._size = None
                    self._summaryAxisManualRangeEnd = None
                    self._summaryAxisManualRangeStart = None
                    self._summaryAxisRange = None
                    self._textColor = None
                    self._textSize = None
                    self._title = None
                    self._titleColor = None
                    self._titleSize = None
                    return
            Holder.__name__ = "ReportChart_Holder"
            self.pyclass = Holder

    class ChartBackgroundDirection_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ChartBackgroundDirection")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ChartSummary_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ChartSummary")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ChartSummary_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportSummaryType",lazy=False)(pname=(ns,"aggregate"), aname="_aggregate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartAxis",lazy=False)(pname=(ns,"axisBinding"), aname="_axisBinding", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"column"), aname="_column", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aggregate = None
                    self._axisBinding = None
                    self._column = None
                    return
            Holder.__name__ = "ChartSummary_Holder"
            self.pyclass = Holder

    class ChartAxis_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ChartAxis")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ChartLegendPosition_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ChartLegendPosition")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ChartRangeType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ChartRangeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReportCrossFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportCrossFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportCrossFilter_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportFilterItem",lazy=False)(pname=(ns,"criteriaItems"), aname="_criteriaItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ObjectFilterOperator",lazy=False)(pname=(ns,"operation"), aname="_operation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"primaryTableColumn"), aname="_primaryTableColumn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relatedTable"), aname="_relatedTable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relatedTableJoinColumn"), aname="_relatedTableJoinColumn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._criteriaItems = []
                    self._operation = None
                    self._primaryTableColumn = None
                    self._relatedTable = None
                    self._relatedTableJoinColumn = None
                    return
            Holder.__name__ = "ReportCrossFilter_Holder"
            self.pyclass = Holder

    class ObjectFilterOperator_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ObjectFilterOperator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReportFolder_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportFolder")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ReportFolder_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Folder_Def not in ns0.ReportFolder_Def.__bases__:
                bases = list(ns0.ReportFolder_Def.__bases__)
                bases.insert(0, ns0.Folder_Def)
                ns0.ReportFolder_Def.__bases__ = tuple(bases)

            ns0.Folder_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DashboardComponentSize_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardComponentSize")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DashboardType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DashboardComponentSection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardComponentSection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DashboardComponentSection_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","DashboardComponentSize",lazy=False)(pname=(ns,"columnSize"), aname="_columnSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardComponent",lazy=False)(pname=(ns,"components"), aname="_components", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._columnSize = None
                    self._components = []
                    return
            Holder.__name__ = "DashboardComponentSection_Holder"
            self.pyclass = Holder

    class DashboardComponent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardComponent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DashboardComponent_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"autoselectColumnsFromReport"), aname="_autoselectColumnsFromReport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartRangeType",lazy=False)(pname=(ns,"chartAxisRange"), aname="_chartAxisRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"chartAxisRangeMax"), aname="_chartAxisRangeMax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"chartAxisRangeMin"), aname="_chartAxisRangeMin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartSummary",lazy=False)(pname=(ns,"chartSummary"), aname="_chartSummary", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardComponentType",lazy=False)(pname=(ns,"componentType"), aname="_componentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardFilterColumn",lazy=False)(pname=(ns,"dashboardFilterColumns"), aname="_dashboardFilterColumns", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardTableColumn",lazy=False)(pname=(ns,"dashboardTableColumn"), aname="_dashboardTableColumn", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartUnits",lazy=False)(pname=(ns,"displayUnits"), aname="_displayUnits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"drillDownUrl"), aname="_drillDownUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"drillEnabled"), aname="_drillEnabled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"drillToDetailEnabled"), aname="_drillToDetailEnabled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableHover"), aname="_enableHover", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"expandOthers"), aname="_expandOthers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"footer"), aname="_footer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"gaugeMax"), aname="_gaugeMax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"gaugeMin"), aname="_gaugeMin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupingColumn"), aname="_groupingColumn", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"header"), aname="_header", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"indicatorBreakpoint1"), aname="_indicatorBreakpoint1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"indicatorBreakpoint2"), aname="_indicatorBreakpoint2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"indicatorHighColor"), aname="_indicatorHighColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"indicatorLowColor"), aname="_indicatorLowColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"indicatorMiddleColor"), aname="_indicatorMiddleColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartLegendPosition",lazy=False)(pname=(ns,"legendPosition"), aname="_legendPosition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"maxValuesDisplayed"), aname="_maxValuesDisplayed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"metricLabel"), aname="_metricLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"page"), aname="_page", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"pageHeightInPixels"), aname="_pageHeightInPixels", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"report"), aname="_report", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"scontrol"), aname="_scontrol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"scontrolHeightInPixels"), aname="_scontrolHeightInPixels", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showPercentage"), aname="_showPercentage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showPicturesOnCharts"), aname="_showPicturesOnCharts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showPicturesOnTables"), aname="_showPicturesOnTables", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showTotal"), aname="_showTotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showValues"), aname="_showValues", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardComponentFilter",lazy=False)(pname=(ns,"sortBy"), aname="_sortBy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"useReportChart"), aname="_useReportChart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._autoselectColumnsFromReport = None
                    self._chartAxisRange = None
                    self._chartAxisRangeMax = None
                    self._chartAxisRangeMin = None
                    self._chartSummary = []
                    self._componentType = None
                    self._dashboardFilterColumns = []
                    self._dashboardTableColumn = []
                    self._displayUnits = None
                    self._drillDownUrl = None
                    self._drillEnabled = None
                    self._drillToDetailEnabled = None
                    self._enableHover = None
                    self._expandOthers = None
                    self._footer = None
                    self._gaugeMax = None
                    self._gaugeMin = None
                    self._groupingColumn = []
                    self._header = None
                    self._indicatorBreakpoint1 = None
                    self._indicatorBreakpoint2 = None
                    self._indicatorHighColor = None
                    self._indicatorLowColor = None
                    self._indicatorMiddleColor = None
                    self._legendPosition = None
                    self._maxValuesDisplayed = None
                    self._metricLabel = None
                    self._page = None
                    self._pageHeightInPixels = None
                    self._report = None
                    self._scontrol = None
                    self._scontrolHeightInPixels = None
                    self._showPercentage = None
                    self._showPicturesOnCharts = None
                    self._showPicturesOnTables = None
                    self._showTotal = None
                    self._showValues = None
                    self._sortBy = None
                    self._title = None
                    self._useReportChart = None
                    return
            Holder.__name__ = "DashboardComponent_Holder"
            self.pyclass = Holder

    class DashboardFilterColumn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardFilterColumn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DashboardFilterColumn_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"column"), aname="_column", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._column = None
                    return
            Holder.__name__ = "DashboardFilterColumn_Holder"
            self.pyclass = Holder

    class DashboardTableColumn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardTableColumn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DashboardTableColumn_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportSummaryType",lazy=False)(pname=(ns,"aggregateType"), aname="_aggregateType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"column"), aname="_column", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showTotal"), aname="_showTotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardComponentFilter",lazy=False)(pname=(ns,"sortBy"), aname="_sortBy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aggregateType = None
                    self._column = None
                    self._showTotal = None
                    self._sortBy = None
                    return
            Holder.__name__ = "DashboardTableColumn_Holder"
            self.pyclass = Holder

    class DashboardFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DashboardFilter_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","DashboardFilterOption",lazy=False)(pname=(ns,"dashboardFilterOptions"), aname="_dashboardFilterOptions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dashboardFilterOptions = []
                    self._name = None
                    return
            Holder.__name__ = "DashboardFilter_Holder"
            self.pyclass = Holder

    class DashboardFilterOption_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardFilterOption")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DashboardFilterOption_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","DashboardFilterOperation",lazy=False)(pname=(ns,"operator"), aname="_operator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operator = None
                    self._values = []
                    return
            Holder.__name__ = "DashboardFilterOption_Holder"
            self.pyclass = Holder

    class Dashboard_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Dashboard")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Dashboard_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"backgroundEndColor"), aname="_backgroundEndColor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ChartBackgroundDirection",lazy=False)(pname=(ns,"backgroundFadeDirection"), aname="_backgroundFadeDirection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"backgroundStartColor"), aname="_backgroundStartColor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardFilter",lazy=False)(pname=(ns,"dashboardFilters"), aname="_dashboardFilters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardType",lazy=False)(pname=(ns,"dashboardType"), aname="_dashboardType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardComponentSection",lazy=False)(pname=(ns,"leftSection"), aname="_leftSection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardComponentSection",lazy=False)(pname=(ns,"middleSection"), aname="_middleSection", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardComponentSection",lazy=False)(pname=(ns,"rightSection"), aname="_rightSection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"runningUser"), aname="_runningUser", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textColor"), aname="_textColor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"titleColor"), aname="_titleColor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"titleSize"), aname="_titleSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Dashboard_Def.__bases__:
                bases = list(ns0.Dashboard_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Dashboard_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DashboardFolder_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardFolder")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DashboardFolder_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Folder_Def not in ns0.DashboardFolder_Def.__bases__:
                bases = list(ns0.DashboardFolder_Def.__bases__)
                bases.insert(0, ns0.Folder_Def)
                ns0.DashboardFolder_Def.__bases__ = tuple(bases)

            ns0.Folder_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AnalyticSnapshot_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AnalyticSnapshot")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AnalyticSnapshot_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupColumn"), aname="_groupColumn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","AnalyticSnapshotMapping",lazy=False)(pname=(ns,"mappings"), aname="_mappings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"runningUser"), aname="_runningUser", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sourceReport"), aname="_sourceReport", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"targetObject"), aname="_targetObject", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.AnalyticSnapshot_Def.__bases__:
                bases = list(ns0.AnalyticSnapshot_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.AnalyticSnapshot_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AnalyticSnapshotMapping_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AnalyticSnapshotMapping")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AnalyticSnapshotMapping_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportSummaryType",lazy=False)(pname=(ns,"aggregateType"), aname="_aggregateType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sourceField"), aname="_sourceField", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportJobSourceTypes",lazy=False)(pname=(ns,"sourceType"), aname="_sourceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"targetField"), aname="_targetField", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aggregateType = None
                    self._sourceField = None
                    self._sourceType = None
                    self._targetField = None
                    return
            Holder.__name__ = "AnalyticSnapshotMapping_Holder"
            self.pyclass = Holder

    class ReportJobSourceTypes_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportJobSourceTypes")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AddressSettings_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AddressSettings")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AddressSettings_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CountriesAndStates",lazy=False)(pname=(ns,"countriesAndStates"), aname="_countriesAndStates", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.AddressSettings_Def.__bases__:
                bases = list(ns0.AddressSettings_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.AddressSettings_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CountriesAndStates_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CountriesAndStates")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CountriesAndStates_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","Country",lazy=False)(pname=(ns,"countries"), aname="_countries", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._countries = []
                    return
            Holder.__name__ = "CountriesAndStates_Holder"
            self.pyclass = Holder

    class Country_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Country")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Country_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"integrationValue"), aname="_integrationValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isoCode"), aname="_isoCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","State",lazy=False)(pname=(ns,"states"), aname="_states", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._active = None
                    self._integrationValue = None
                    self._isoCode = None
                    self._label = None
                    self._states = []
                    return
            Holder.__name__ = "Country_Holder"
            self.pyclass = Holder

    class State_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "State")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.State_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"integrationValue"), aname="_integrationValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isoCode"), aname="_isoCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._active = None
                    self._integrationValue = None
                    self._isoCode = None
                    self._label = None
                    return
            Holder.__name__ = "State_Holder"
            self.pyclass = Holder

    class Layout_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Layout")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Layout_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"customButtons"), aname="_customButtons", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CustomConsoleComponents",lazy=False)(pname=(ns,"customConsoleComponents"), aname="_customConsoleComponents", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"emailDefault"), aname="_emailDefault", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"excludeButtons"), aname="_excludeButtons", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LayoutHeader",lazy=False)(pname=(ns,"headers"), aname="_headers", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LayoutSection",lazy=False)(pname=(ns,"layoutSections"), aname="_layoutSections", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","MiniLayout",lazy=False)(pname=(ns,"miniLayout"), aname="_miniLayout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"multilineLayoutFields"), aname="_multilineLayoutFields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RelatedListItem",lazy=False)(pname=(ns,"relatedLists"), aname="_relatedLists", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relatedObjects"), aname="_relatedObjects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"runAssignmentRulesDefault"), aname="_runAssignmentRulesDefault", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showEmailCheckbox"), aname="_showEmailCheckbox", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showHighlightsPanel"), aname="_showHighlightsPanel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showInteractionLogPanel"), aname="_showInteractionLogPanel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showKnowledgeComponent"), aname="_showKnowledgeComponent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showRunAssignmentRulesCheckbox"), aname="_showRunAssignmentRulesCheckbox", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showSolutionSection"), aname="_showSolutionSection", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showSubmitAndAttachButton"), aname="_showSubmitAndAttachButton", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SummaryLayout",lazy=False)(pname=(ns,"summaryLayout"), aname="_summaryLayout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Layout_Def.__bases__:
                bases = list(ns0.Layout_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Layout_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomConsoleComponents_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomConsoleComponents")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomConsoleComponents_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","PrimaryTabComponents",lazy=False)(pname=(ns,"primaryTabComponents"), aname="_primaryTabComponents", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SubtabComponents",lazy=False)(pname=(ns,"subtabComponents"), aname="_subtabComponents", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._primaryTabComponents = None
                    self._subtabComponents = None
                    return
            Holder.__name__ = "CustomConsoleComponents_Holder"
            self.pyclass = Holder

    class PrimaryTabComponents_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PrimaryTabComponents")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PrimaryTabComponents_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ConsoleComponent",lazy=False)(pname=(ns,"component"), aname="_component", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._component = []
                    return
            Holder.__name__ = "PrimaryTabComponents_Holder"
            self.pyclass = Holder

    class ConsoleComponent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ConsoleComponent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ConsoleComponent_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"height"), aname="_height", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"visualforcePage"), aname="_visualforcePage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"width"), aname="_width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._height = None
                    self._location = None
                    self._visualforcePage = None
                    self._width = None
                    return
            Holder.__name__ = "ConsoleComponent_Holder"
            self.pyclass = Holder

    class SubtabComponents_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SubtabComponents")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SubtabComponents_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ConsoleComponent",lazy=False)(pname=(ns,"component"), aname="_component", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._component = []
                    return
            Holder.__name__ = "SubtabComponents_Holder"
            self.pyclass = Holder

    class LayoutSection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LayoutSection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LayoutSection_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"customLabel"), aname="_customLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"detailHeading"), aname="_detailHeading", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"editHeading"), aname="_editHeading", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LayoutColumn",lazy=False)(pname=(ns,"layoutColumns"), aname="_layoutColumns", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LayoutSectionStyle",lazy=False)(pname=(ns,"style"), aname="_style", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customLabel = None
                    self._detailHeading = None
                    self._editHeading = None
                    self._label = None
                    self._layoutColumns = []
                    self._style = None
                    return
            Holder.__name__ = "LayoutSection_Holder"
            self.pyclass = Holder

    class LayoutColumn_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LayoutColumn")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LayoutColumn_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","LayoutItem",lazy=False)(pname=(ns,"layoutItems"), aname="_layoutItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reserved"), aname="_reserved", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._layoutItems = []
                    self._reserved = None
                    return
            Holder.__name__ = "LayoutColumn_Holder"
            self.pyclass = Holder

    class LayoutItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LayoutItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LayoutItem_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","UiBehavior",lazy=False)(pname=(ns,"behavior"), aname="_behavior", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"customLink"), aname="_customLink", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"emptySpace"), aname="_emptySpace", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"height"), aname="_height", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"page"), aname="_page", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"scontrol"), aname="_scontrol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showLabel"), aname="_showLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showScrollbars"), aname="_showScrollbars", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"width"), aname="_width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._behavior = None
                    self._customLink = None
                    self._emptySpace = None
                    self._field = None
                    self._height = None
                    self._page = None
                    self._scontrol = None
                    self._showLabel = None
                    self._showScrollbars = None
                    self._width = None
                    return
            Holder.__name__ = "LayoutItem_Holder"
            self.pyclass = Holder

    class MiniLayout_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "MiniLayout")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MiniLayout_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RelatedListItem",lazy=False)(pname=(ns,"relatedLists"), aname="_relatedLists", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fields = []
                    self._relatedLists = []
                    return
            Holder.__name__ = "MiniLayout_Holder"
            self.pyclass = Holder

    class RelatedListItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RelatedListItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RelatedListItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"customButtons"), aname="_customButtons", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"excludeButtons"), aname="_excludeButtons", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relatedList"), aname="_relatedList", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sortField"), aname="_sortField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SortOrder",lazy=False)(pname=(ns,"sortOrder"), aname="_sortOrder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customButtons = []
                    self._excludeButtons = []
                    self._fields = []
                    self._relatedList = None
                    self._sortField = None
                    self._sortOrder = None
                    return
            Holder.__name__ = "RelatedListItem_Holder"
            self.pyclass = Holder

    class SummaryLayout_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SummaryLayout")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SummaryLayout_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"masterLabel"), aname="_masterLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"sizeX"), aname="_sizeX", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"sizeY"), aname="_sizeY", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"sizeZ"), aname="_sizeZ", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SummaryLayoutItem",lazy=False)(pname=(ns,"summaryLayoutItems"), aname="_summaryLayoutItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SummaryLayoutStyle",lazy=False)(pname=(ns,"summaryLayoutStyle"), aname="_summaryLayoutStyle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._masterLabel = None
                    self._sizeX = None
                    self._sizeY = None
                    self._sizeZ = None
                    self._summaryLayoutItems = []
                    self._summaryLayoutStyle = None
                    return
            Holder.__name__ = "SummaryLayout_Holder"
            self.pyclass = Holder

    class SummaryLayoutItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SummaryLayoutItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SummaryLayoutItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"customLink"), aname="_customLink", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"posX"), aname="_posX", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"posY"), aname="_posY", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"posZ"), aname="_posZ", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._customLink = None
                    self._field = None
                    self._posX = None
                    self._posY = None
                    self._posZ = None
                    return
            Holder.__name__ = "SummaryLayoutItem_Holder"
            self.pyclass = Holder

    class SummaryLayoutStyle_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SummaryLayoutStyle")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Document_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Document")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Document_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"internalUseOnly"), aname="_internalUseOnly", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"keywords"), aname="_keywords", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"public"), aname="_public", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MetadataWithContent_Def not in ns0.Document_Def.__bases__:
                bases = list(ns0.Document_Def.__bases__)
                bases.insert(0, ns0.MetadataWithContent_Def)
                ns0.Document_Def.__bases__ = tuple(bases)

            ns0.MetadataWithContent_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DocumentFolder_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DocumentFolder")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DocumentFolder_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Folder_Def not in ns0.DocumentFolder_Def.__bases__:
                bases = list(ns0.DocumentFolder_Def.__bases__)
                bases.insert(0, ns0.Folder_Def)
                ns0.DocumentFolder_Def.__bases__ = tuple(bases)

            ns0.Folder_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FolderAccessTypes_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FolderAccessTypes")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CustomPageWebLink_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomPageWebLink")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomPageWebLink_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","WebLinkAvailability",lazy=False)(pname=(ns,"availability"), aname="_availability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WebLinkDisplayType",lazy=False)(pname=(ns,"displayType"), aname="_displayType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Encoding",lazy=False)(pname=(ns,"encodingKey"), aname="_encodingKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"hasMenubar"), aname="_hasMenubar", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"hasScrollbars"), aname="_hasScrollbars", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"hasToolbar"), aname="_hasToolbar", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"height"), aname="_height", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isResizable"), aname="_isResizable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WebLinkType",lazy=False)(pname=(ns,"linkType"), aname="_linkType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"masterLabel"), aname="_masterLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WebLinkWindowType",lazy=False)(pname=(ns,"openType"), aname="_openType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"page"), aname="_page", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WebLinkPosition",lazy=False)(pname=(ns,"position"), aname="_position", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"protected"), aname="_protected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"requireRowSelection"), aname="_requireRowSelection", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"scontrol"), aname="_scontrol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showsLocation"), aname="_showsLocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showsStatus"), aname="_showsStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"width"), aname="_width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CustomPageWebLink_Def.__bases__:
                bases = list(ns0.CustomPageWebLink_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CustomPageWebLink_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomTab_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomTab")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomTab_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"customObject"), aname="_customObject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"frameHeight"), aname="_frameHeight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"hasSidebar"), aname="_hasSidebar", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"icon"), aname="_icon", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"mobileReady"), aname="_mobileReady", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"motif"), aname="_motif", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"page"), aname="_page", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"scontrol"), aname="_scontrol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"splashPageLink"), aname="_splashPageLink", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Encoding",lazy=False)(pname=(ns,"urlEncodingKey"), aname="_urlEncodingKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CustomTab_Def.__bases__:
                bases = list(ns0.CustomTab_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CustomTab_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomApplicationComponent_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomApplicationComponent")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomApplicationComponent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"buttonIconUrl"), aname="_buttonIconUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"buttonStyle"), aname="_buttonStyle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"buttonText"), aname="_buttonText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"buttonWidth"), aname="_buttonWidth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"height"), aname="_height", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isHeightFixed"), aname="_isHeightFixed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isHidden"), aname="_isHidden", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isWidthFixed"), aname="_isWidthFixed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"visualforcePage"), aname="_visualforcePage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"width"), aname="_width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CustomApplicationComponent_Def.__bases__:
                bases = list(ns0.CustomApplicationComponent_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CustomApplicationComponent_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomApplication_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomApplication")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomApplication_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CustomApplicationComponents",lazy=False)(pname=(ns,"customApplicationComponents"), aname="_customApplicationComponents", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultLandingTab"), aname="_defaultLandingTab", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"detailPageRefreshMethod"), aname="_detailPageRefreshMethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DomainWhitelist",lazy=False)(pname=(ns,"domainWhitelist"), aname="_domainWhitelist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isServiceCloudConsole"), aname="_isServiceCloudConsole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ListPlacement",lazy=False)(pname=(ns,"listPlacement"), aname="_listPlacement", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"listRefreshMethod"), aname="_listRefreshMethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"logo"), aname="_logo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tab"), aname="_tab", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkspaceMappings",lazy=False)(pname=(ns,"workspaceMappings"), aname="_workspaceMappings", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CustomApplication_Def.__bases__:
                bases = list(ns0.CustomApplication_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CustomApplication_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomApplicationComponents_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomApplicationComponents")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomApplicationComponents_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"alignment"), aname="_alignment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"customApplicationComponent"), aname="_customApplicationComponent", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._alignment = None
                    self._customApplicationComponent = []
                    return
            Holder.__name__ = "CustomApplicationComponents_Holder"
            self.pyclass = Holder

    class DomainWhitelist_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DomainWhitelist")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DomainWhitelist_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"domain"), aname="_domain", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._domain = []
                    return
            Holder.__name__ = "DomainWhitelist_Holder"
            self.pyclass = Holder

    class ListPlacement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ListPlacement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListPlacement_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"height"), aname="_height", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"units"), aname="_units", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"width"), aname="_width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._height = None
                    self._location = None
                    self._units = None
                    self._width = None
                    return
            Holder.__name__ = "ListPlacement_Holder"
            self.pyclass = Holder

    class WorkspaceMappings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkspaceMappings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WorkspaceMappings_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","WorkspaceMapping",lazy=False)(pname=(ns,"mapping"), aname="_mapping", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._mapping = []
                    return
            Holder.__name__ = "WorkspaceMappings_Holder"
            self.pyclass = Holder

    class WorkspaceMapping_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkspaceMapping")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WorkspaceMapping_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fieldName"), aname="_fieldName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tab"), aname="_tab", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldName = None
                    self._tab = None
                    return
            Holder.__name__ = "WorkspaceMapping_Holder"
            self.pyclass = Holder

    class Portal_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Portal")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Portal_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"admin"), aname="_admin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultLanguage"), aname="_defaultLanguage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"emailSenderAddress"), aname="_emailSenderAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"emailSenderName"), aname="_emailSenderName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableSelfCloseCase"), aname="_enableSelfCloseCase", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"footerDocument"), aname="_footerDocument", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"forgotPassTemplate"), aname="_forgotPassTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"headerDocument"), aname="_headerDocument", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isSelfRegistrationActivated"), aname="_isSelfRegistrationActivated", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginHeaderDocument"), aname="_loginHeaderDocument", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"logoDocument"), aname="_logoDocument", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"logoutUrl"), aname="_logoutUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newCommentTemplate"), aname="_newCommentTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newPassTemplate"), aname="_newPassTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newUserTemplate"), aname="_newUserTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ownerNotifyTemplate"), aname="_ownerNotifyTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selfRegNewUserUrl"), aname="_selfRegNewUserUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selfRegUserDefaultProfile"), aname="_selfRegUserDefaultProfile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PortalRoles",lazy=False)(pname=(ns,"selfRegUserDefaultRole"), aname="_selfRegUserDefaultRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"selfRegUserTemplate"), aname="_selfRegUserTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showActionConfirmation"), aname="_showActionConfirmation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"stylesheetDocument"), aname="_stylesheetDocument", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PortalType",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Portal_Def.__bases__:
                bases = list(ns0.Portal_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Portal_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PortalRoles_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PortalRoles")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Letterhead_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Letterhead")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Letterhead_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"available"), aname="_available", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"backgroundColor"), aname="_backgroundColor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bodyColor"), aname="_bodyColor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LetterheadLine",lazy=False)(pname=(ns,"bottomLine"), aname="_bottomLine", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LetterheadHeaderFooter",lazy=False)(pname=(ns,"footer"), aname="_footer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LetterheadHeaderFooter",lazy=False)(pname=(ns,"header"), aname="_header", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LetterheadLine",lazy=False)(pname=(ns,"middleLine"), aname="_middleLine", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LetterheadLine",lazy=False)(pname=(ns,"topLine"), aname="_topLine", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Letterhead_Def.__bases__:
                bases = list(ns0.Letterhead_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Letterhead_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LetterheadLine_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LetterheadLine")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LetterheadLine_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"color"), aname="_color", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"height"), aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._color = None
                    self._height = None
                    return
            Holder.__name__ = "LetterheadLine_Holder"
            self.pyclass = Holder

    class LetterheadHeaderFooter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LetterheadHeaderFooter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LetterheadHeaderFooter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"backgroundColor"), aname="_backgroundColor", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"height"), aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LetterheadHorizontalAlignment",lazy=False)(pname=(ns,"horizontalAlignment"), aname="_horizontalAlignment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"logo"), aname="_logo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LetterheadVerticalAlignment",lazy=False)(pname=(ns,"verticalAlignment"), aname="_verticalAlignment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._backgroundColor = None
                    self._height = None
                    self._horizontalAlignment = None
                    self._logo = None
                    self._verticalAlignment = None
                    return
            Holder.__name__ = "LetterheadHeaderFooter_Holder"
            self.pyclass = Holder

    class EmailTemplateType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EmailTemplateType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EmailTemplateStyle_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EmailTemplateStyle")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EmailTemplate_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EmailTemplate")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EmailTemplate_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"apiVersion"), aname="_apiVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"attachedDocuments"), aname="_attachedDocuments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Attachment",lazy=False)(pname=(ns,"attachments"), aname="_attachments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"available"), aname="_available", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Encoding",lazy=False)(pname=(ns,"encodingKey"), aname="_encodingKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"letterhead"), aname="_letterhead", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PackageVersion",lazy=False)(pname=(ns,"packageVersions"), aname="_packageVersions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EmailTemplateStyle",lazy=False)(pname=(ns,"style"), aname="_style", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"subject"), aname="_subject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textOnly"), aname="_textOnly", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EmailTemplateType",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MetadataWithContent_Def not in ns0.EmailTemplate_Def.__bases__:
                bases = list(ns0.EmailTemplate_Def.__bases__)
                bases.insert(0, ns0.MetadataWithContent_Def)
                ns0.EmailTemplate_Def.__bases__ = tuple(bases)

            ns0.MetadataWithContent_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Attachment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Attachment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Attachment_Def.schema
            TClist = [ZSI.TC.Base64String(pname=(ns,"content"), aname="_content", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._content = None
                    self._name = None
                    return
            Holder.__name__ = "Attachment_Holder"
            self.pyclass = Holder

    class EmailFolder_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EmailFolder")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EmailFolder_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Folder_Def not in ns0.EmailFolder_Def.__bases__:
                bases = list(ns0.EmailFolder_Def.__bases__)
                bases.insert(0, ns0.Folder_Def)
                ns0.EmailFolder_Def.__bases__ = tuple(bases)

            ns0.Folder_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Workflow_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Workflow")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Workflow_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","WorkflowAlert",lazy=False)(pname=(ns,"alerts"), aname="_alerts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowFieldUpdate",lazy=False)(pname=(ns,"fieldUpdates"), aname="_fieldUpdates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowKnowledgePublish",lazy=False)(pname=(ns,"knowledgePublishes"), aname="_knowledgePublishes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowOutboundMessage",lazy=False)(pname=(ns,"outboundMessages"), aname="_outboundMessages", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowRule",lazy=False)(pname=(ns,"rules"), aname="_rules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowSend",lazy=False)(pname=(ns,"send"), aname="_send", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowTask",lazy=False)(pname=(ns,"tasks"), aname="_tasks", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Workflow_Def.__bases__:
                bases = list(ns0.Workflow_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Workflow_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WorkflowAlert_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowAlert")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WorkflowAlert_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ccEmails"), aname="_ccEmails", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"protected"), aname="_protected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowEmailRecipient",lazy=False)(pname=(ns,"recipients"), aname="_recipients", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"senderAddress"), aname="_senderAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ActionEmailSenderType",lazy=False)(pname=(ns,"senderType"), aname="_senderType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"template"), aname="_template", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WorkflowAction_Def not in ns0.WorkflowAlert_Def.__bases__:
                bases = list(ns0.WorkflowAlert_Def.__bases__)
                bases.insert(0, ns0.WorkflowAction_Def)
                ns0.WorkflowAlert_Def.__bases__ = tuple(bases)

            ns0.WorkflowAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WorkflowEmailRecipient_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowEmailRecipient")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WorkflowEmailRecipient_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"recipient"), aname="_recipient", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ActionEmailRecipientTypes",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._field = None
                    self._recipient = None
                    self._type = None
                    return
            Holder.__name__ = "WorkflowEmailRecipient_Holder"
            self.pyclass = Holder

    class ActionEmailRecipientTypes_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ActionEmailRecipientTypes")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ActionEmailSenderType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ActionEmailSenderType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WorkflowFieldUpdate_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowFieldUpdate")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WorkflowFieldUpdate_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"formula"), aname="_formula", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"literalValue"), aname="_literalValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"lookupValue"), aname="_lookupValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LookupValueType",lazy=False)(pname=(ns,"lookupValueType"), aname="_lookupValueType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"notifyAssignee"), aname="_notifyAssignee", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FieldUpdateOperation",lazy=False)(pname=(ns,"operation"), aname="_operation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"protected"), aname="_protected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"reevaluateOnChange"), aname="_reevaluateOnChange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"targetObject"), aname="_targetObject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WorkflowAction_Def not in ns0.WorkflowFieldUpdate_Def.__bases__:
                bases = list(ns0.WorkflowFieldUpdate_Def.__bases__)
                bases.insert(0, ns0.WorkflowAction_Def)
                ns0.WorkflowFieldUpdate_Def.__bases__ = tuple(bases)

            ns0.WorkflowAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FieldUpdateOperation_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FieldUpdateOperation")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WorkflowKnowledgePublish_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowKnowledgePublish")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WorkflowKnowledgePublish_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","KnowledgeWorkflowAction",lazy=False)(pname=(ns,"action"), aname="_action", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"language"), aname="_language", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"protected"), aname="_protected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WorkflowAction_Def not in ns0.WorkflowKnowledgePublish_Def.__bases__:
                bases = list(ns0.WorkflowKnowledgePublish_Def.__bases__)
                bases.insert(0, ns0.WorkflowAction_Def)
                ns0.WorkflowKnowledgePublish_Def.__bases__ = tuple(bases)

            ns0.WorkflowAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class KnowledgeWorkflowAction_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "KnowledgeWorkflowAction")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WorkflowOutboundMessage_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowOutboundMessage")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WorkflowOutboundMessage_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"apiVersion"), aname="_apiVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"endpointUrl"), aname="_endpointUrl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"includeSessionId"), aname="_includeSessionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"integrationUser"), aname="_integrationUser", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"protected"), aname="_protected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"useDeadLetterQueue"), aname="_useDeadLetterQueue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WorkflowAction_Def not in ns0.WorkflowOutboundMessage_Def.__bases__:
                bases = list(ns0.WorkflowOutboundMessage_Def.__bases__)
                bases.insert(0, ns0.WorkflowAction_Def)
                ns0.WorkflowOutboundMessage_Def.__bases__ = tuple(bases)

            ns0.WorkflowAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WorkflowRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WorkflowRule_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","WorkflowActionReference",lazy=False)(pname=(ns,"actions"), aname="_actions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FilterItem",lazy=False)(pname=(ns,"criteriaItems"), aname="_criteriaItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"formula"), aname="_formula", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowTriggerTypes",lazy=False)(pname=(ns,"triggerType"), aname="_triggerType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowTimeTrigger",lazy=False)(pname=(ns,"workflowTimeTriggers"), aname="_workflowTimeTriggers", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.WorkflowRule_Def.__bases__:
                bases = list(ns0.WorkflowRule_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.WorkflowRule_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WorkflowActionReference_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowActionReference")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WorkflowActionReference_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowActionType",lazy=False)(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    return
            Holder.__name__ = "WorkflowActionReference_Holder"
            self.pyclass = Holder

    class WorkflowActionType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowActionType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WorkflowTriggerTypes_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowTriggerTypes")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WorkflowTimeTrigger_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowTimeTrigger")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WorkflowTimeTrigger_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","WorkflowActionReference",lazy=False)(pname=(ns,"actions"), aname="_actions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"offsetFromField"), aname="_offsetFromField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"timeLength"), aname="_timeLength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowTimeUnits",lazy=False)(pname=(ns,"workflowTimeTriggerUnit"), aname="_workflowTimeTriggerUnit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._actions = []
                    self._offsetFromField = None
                    self._timeLength = None
                    self._workflowTimeTriggerUnit = None
                    return
            Holder.__name__ = "WorkflowTimeTrigger_Holder"
            self.pyclass = Holder

    class WorkflowTimeUnits_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowTimeUnits")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WorkflowSend_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowSend")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WorkflowSend_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","SendAction",lazy=False)(pname=(ns,"action"), aname="_action", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"language"), aname="_language", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"protected"), aname="_protected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WorkflowAction_Def not in ns0.WorkflowSend_Def.__bases__:
                bases = list(ns0.WorkflowSend_Def.__bases__)
                bases.insert(0, ns0.WorkflowAction_Def)
                ns0.WorkflowSend_Def.__bases__ = tuple(bases)

            ns0.WorkflowAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SendAction_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SendAction")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WorkflowTask_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowTask")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WorkflowTask_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"assignedTo"), aname="_assignedTo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ActionTaskAssignedToTypes",lazy=False)(pname=(ns,"assignedToType"), aname="_assignedToType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"dueDateOffset"), aname="_dueDateOffset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"notifyAssignee"), aname="_notifyAssignee", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"offsetFromField"), aname="_offsetFromField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"priority"), aname="_priority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"protected"), aname="_protected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"subject"), aname="_subject", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.WorkflowAction_Def not in ns0.WorkflowTask_Def.__bases__:
                bases = list(ns0.WorkflowTask_Def.__bases__)
                bases.insert(0, ns0.WorkflowAction_Def)
                ns0.WorkflowTask_Def.__bases__ = tuple(bases)

            ns0.WorkflowAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ActionTaskAssignedToTypes_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ActionTaskAssignedToTypes")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RuleEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RuleEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RuleEntry_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"assignedTo"), aname="_assignedTo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","AssignToLookupValueType",lazy=False)(pname=(ns,"assignedToType"), aname="_assignedToType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"businessHours"), aname="_businessHours", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","BusinessHoursSourceType",lazy=False)(pname=(ns,"businessHoursSource"), aname="_businessHoursSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FilterItem",lazy=False)(pname=(ns,"criteriaItems"), aname="_criteriaItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"disableEscalationWhenModified"), aname="_disableEscalationWhenModified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EscalationAction",lazy=False)(pname=(ns,"escalationAction"), aname="_escalationAction", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EscalationStartTimeType",lazy=False)(pname=(ns,"escalationStartTime"), aname="_escalationStartTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"formula"), aname="_formula", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"overrideExistingTeams"), aname="_overrideExistingTeams", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"replyToEmail"), aname="_replyToEmail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"senderEmail"), aname="_senderEmail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"senderName"), aname="_senderName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"team"), aname="_team", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"template"), aname="_template", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._assignedTo = None
                    self._assignedToType = None
                    self._booleanFilter = None
                    self._businessHours = None
                    self._businessHoursSource = None
                    self._criteriaItems = []
                    self._disableEscalationWhenModified = None
                    self._escalationAction = []
                    self._escalationStartTime = None
                    self._formula = None
                    self._overrideExistingTeams = None
                    self._replyToEmail = None
                    self._senderEmail = None
                    self._senderName = None
                    self._team = []
                    self._template = None
                    return
            Holder.__name__ = "RuleEntry_Holder"
            self.pyclass = Holder

    class EscalationAction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EscalationAction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EscalationAction_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"assignedTo"), aname="_assignedTo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"assignedToTemplate"), aname="_assignedToTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","AssignToLookupValueType",lazy=False)(pname=(ns,"assignedToType"), aname="_assignedToType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"minutesToEscalation"), aname="_minutesToEscalation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"notifyCaseOwner"), aname="_notifyCaseOwner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"notifyEmail"), aname="_notifyEmail", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"notifyTo"), aname="_notifyTo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"notifyToTemplate"), aname="_notifyToTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._assignedTo = None
                    self._assignedToTemplate = None
                    self._assignedToType = None
                    self._minutesToEscalation = None
                    self._notifyCaseOwner = None
                    self._notifyEmail = []
                    self._notifyTo = None
                    self._notifyToTemplate = None
                    return
            Holder.__name__ = "EscalationAction_Holder"
            self.pyclass = Holder

    class AssignmentRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AssignmentRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AssignmentRules_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","AssignmentRule",lazy=False)(pname=(ns,"assignmentRule"), aname="_assignmentRule", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.AssignmentRules_Def.__bases__:
                bases = list(ns0.AssignmentRules_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.AssignmentRules_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AssignmentRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AssignmentRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AssignmentRule_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RuleEntry",lazy=False)(pname=(ns,"ruleEntry"), aname="_ruleEntry", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.AssignmentRule_Def.__bases__:
                bases = list(ns0.AssignmentRule_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.AssignmentRule_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AutoResponseRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AutoResponseRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AutoResponseRules_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","AutoResponseRule",lazy=False)(pname=(ns,"autoResponseRule"), aname="_autoResponseRule", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.AutoResponseRules_Def.__bases__:
                bases = list(ns0.AutoResponseRules_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.AutoResponseRules_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AutoResponseRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AutoResponseRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AutoResponseRule_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RuleEntry",lazy=False)(pname=(ns,"ruleEntry"), aname="_ruleEntry", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.AutoResponseRule_Def.__bases__:
                bases = list(ns0.AutoResponseRule_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.AutoResponseRule_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EscalationRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EscalationRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EscalationRules_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","EscalationRule",lazy=False)(pname=(ns,"escalationRule"), aname="_escalationRule", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.EscalationRules_Def.__bases__:
                bases = list(ns0.EscalationRules_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.EscalationRules_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EscalationRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EscalationRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EscalationRule_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RuleEntry",lazy=False)(pname=(ns,"ruleEntry"), aname="_ruleEntry", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.EscalationRule_Def.__bases__:
                bases = list(ns0.EscalationRule_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.EscalationRule_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Role_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Role")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Role_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"parentRole"), aname="_parentRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.RoleOrTerritory_Def not in ns0.Role_Def.__bases__:
                bases = list(ns0.Role_Def.__bases__)
                bases.insert(0, ns0.RoleOrTerritory_Def)
                ns0.Role_Def.__bases__ = tuple(bases)

            ns0.RoleOrTerritory_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Territory_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Territory")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Territory_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"parentTerritory"), aname="_parentTerritory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.RoleOrTerritory_Def not in ns0.Territory_Def.__bases__:
                bases = list(ns0.Territory_Def.__bases__)
                bases.insert(0, ns0.RoleOrTerritory_Def)
                ns0.Territory_Def.__bases__ = tuple(bases)

            ns0.RoleOrTerritory_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Group_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Group")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Group_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"doesIncludeBosses"), aname="_doesIncludeBosses", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Group_Def.__bases__:
                bases = list(ns0.Group_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Group_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class HomePageComponent_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "HomePageComponent")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.HomePageComponent_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"body"), aname="_body", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"links"), aname="_links", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PageComponentType",lazy=False)(pname=(ns,"pageComponentType"), aname="_pageComponentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PageComponentWidth",lazy=False)(pname=(ns,"width"), aname="_width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.HomePageComponent_Def.__bases__:
                bases = list(ns0.HomePageComponent_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.HomePageComponent_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class HomePageLayout_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "HomePageLayout")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.HomePageLayout_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"narrowComponents"), aname="_narrowComponents", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"wideComponents"), aname="_wideComponents", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.HomePageLayout_Def.__bases__:
                bases = list(ns0.HomePageLayout_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.HomePageLayout_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomObjectTranslation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomObjectTranslation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomObjectTranslation_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ObjectNameCaseValue",lazy=False)(pname=(ns,"caseValues"), aname="_caseValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CustomFieldTranslation",lazy=False)(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Gender",lazy=False)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LayoutTranslation",lazy=False)(pname=(ns,"layouts"), aname="_layouts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"nameFieldLabel"), aname="_nameFieldLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","NamedFilterTranslation",lazy=False)(pname=(ns,"namedFilters"), aname="_namedFilters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","RecordTypeTranslation",lazy=False)(pname=(ns,"recordTypes"), aname="_recordTypes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SharingReasonTranslation",lazy=False)(pname=(ns,"sharingReasons"), aname="_sharingReasons", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","StartsWith",lazy=False)(pname=(ns,"startsWith"), aname="_startsWith", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ValidationRuleTranslation",lazy=False)(pname=(ns,"validationRules"), aname="_validationRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WebLinkTranslation",lazy=False)(pname=(ns,"webLinks"), aname="_webLinks", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowTaskTranslation",lazy=False)(pname=(ns,"workflowTasks"), aname="_workflowTasks", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CustomObjectTranslation_Def.__bases__:
                bases = list(ns0.CustomObjectTranslation_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CustomObjectTranslation_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ObjectNameCaseValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ObjectNameCaseValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ObjectNameCaseValue_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","Article",lazy=False)(pname=(ns,"article"), aname="_article", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CaseType",lazy=False)(pname=(ns,"caseType"), aname="_caseType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"plural"), aname="_plural", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Possessive",lazy=False)(pname=(ns,"possessive"), aname="_possessive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._article = None
                    self._caseType = None
                    self._plural = None
                    self._possessive = None
                    self._value = None
                    return
            Holder.__name__ = "ObjectNameCaseValue_Holder"
            self.pyclass = Holder

    class CustomFieldTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomFieldTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomFieldTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"help"), aname="_help", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PicklistValueTranslation",lazy=False)(pname=(ns,"picklistValues"), aname="_picklistValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"relationshipLabel"), aname="_relationshipLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._help = None
                    self._label = None
                    self._name = None
                    self._picklistValues = []
                    self._relationshipLabel = None
                    return
            Holder.__name__ = "CustomFieldTranslation_Holder"
            self.pyclass = Holder

    class PicklistValueTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PicklistValueTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PicklistValueTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"masterLabel"), aname="_masterLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"translation"), aname="_translation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._masterLabel = None
                    self._translation = None
                    return
            Holder.__name__ = "PicklistValueTranslation_Holder"
            self.pyclass = Holder

    class LayoutTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LayoutTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LayoutTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"layout"), aname="_layout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"layoutType"), aname="_layoutType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LayoutSectionTranslation",lazy=False)(pname=(ns,"sections"), aname="_sections", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._layout = None
                    self._layoutType = None
                    self._sections = []
                    return
            Holder.__name__ = "LayoutTranslation_Holder"
            self.pyclass = Holder

    class LayoutSectionTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LayoutSectionTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LayoutSectionTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"section"), aname="_section", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._section = None
                    return
            Holder.__name__ = "LayoutSectionTranslation_Holder"
            self.pyclass = Holder

    class NamedFilterTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "NamedFilterTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.NamedFilterTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"errorMessage"), aname="_errorMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"informationalMessage"), aname="_informationalMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorMessage = None
                    self._informationalMessage = None
                    self._name = None
                    return
            Holder.__name__ = "NamedFilterTranslation_Holder"
            self.pyclass = Holder

    class RecordTypeTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RecordTypeTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RecordTypeTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "RecordTypeTranslation_Holder"
            self.pyclass = Holder

    class SharingReasonTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SharingReasonTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SharingReasonTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "SharingReasonTranslation_Holder"
            self.pyclass = Holder

    class ValidationRuleTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ValidationRuleTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ValidationRuleTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"errorMessage"), aname="_errorMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorMessage = None
                    self._name = None
                    return
            Holder.__name__ = "ValidationRuleTranslation_Holder"
            self.pyclass = Holder

    class WebLinkTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WebLinkTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WebLinkTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "WebLinkTranslation_Holder"
            self.pyclass = Holder

    class WorkflowTaskTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowTaskTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WorkflowTaskTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"subject"), aname="_subject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._name = None
                    self._subject = None
                    return
            Holder.__name__ = "WorkflowTaskTranslation_Holder"
            self.pyclass = Holder

    class Translations_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Translations")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Translations_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CustomApplicationTranslation",lazy=False)(pname=(ns,"customApplications"), aname="_customApplications", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CustomDataTypeTranslation",lazy=False)(pname=(ns,"customDataTypeTranslations"), aname="_customDataTypeTranslations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CustomLabelTranslation",lazy=False)(pname=(ns,"customLabels"), aname="_customLabels", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CustomPageWebLinkTranslation",lazy=False)(pname=(ns,"customPageWebLinks"), aname="_customPageWebLinks", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CustomTabTranslation",lazy=False)(pname=(ns,"customTabs"), aname="_customTabs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportTypeTranslation",lazy=False)(pname=(ns,"reportTypes"), aname="_reportTypes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ScontrolTranslation",lazy=False)(pname=(ns,"scontrols"), aname="_scontrols", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Translations_Def.__bases__:
                bases = list(ns0.Translations_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Translations_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomApplicationTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomApplicationTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomApplicationTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "CustomApplicationTranslation_Holder"
            self.pyclass = Holder

    class CustomDataTypeTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomDataTypeTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomDataTypeTranslation_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CustomDataTypeComponentTranslation",lazy=False)(pname=(ns,"components"), aname="_components", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"customDataTypeName"), aname="_customDataTypeName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._components = []
                    self._customDataTypeName = None
                    self._description = None
                    self._label = None
                    return
            Holder.__name__ = "CustomDataTypeTranslation_Holder"
            self.pyclass = Holder

    class CustomDataTypeComponentTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomDataTypeComponentTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomDataTypeComponentTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"developerSuffix"), aname="_developerSuffix", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._developerSuffix = None
                    self._label = None
                    return
            Holder.__name__ = "CustomDataTypeComponentTranslation_Holder"
            self.pyclass = Holder

    class CustomLabelTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomLabelTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomLabelTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "CustomLabelTranslation_Holder"
            self.pyclass = Holder

    class CustomPageWebLinkTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomPageWebLinkTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomPageWebLinkTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "CustomPageWebLinkTranslation_Holder"
            self.pyclass = Holder

    class CustomTabTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomTabTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomTabTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "CustomTabTranslation_Holder"
            self.pyclass = Holder

    class ReportTypeTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportTypeTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportTypeTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReportTypeSectionTranslation",lazy=False)(pname=(ns,"sections"), aname="_sections", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._label = None
                    self._name = None
                    self._sections = []
                    return
            Holder.__name__ = "ReportTypeTranslation_Holder"
            self.pyclass = Holder

    class ReportTypeSectionTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportTypeSectionTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportTypeSectionTranslation_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ReportTypeColumnTranslation",lazy=False)(pname=(ns,"columns"), aname="_columns", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._columns = []
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "ReportTypeSectionTranslation_Holder"
            self.pyclass = Holder

    class ReportTypeColumnTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportTypeColumnTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReportTypeColumnTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "ReportTypeColumnTranslation_Holder"
            self.pyclass = Holder

    class ScontrolTranslation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ScontrolTranslation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ScontrolTranslation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "ScontrolTranslation_Holder"
            self.pyclass = Holder

    class Flow_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Flow")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Flow_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FlowApexPluginCall",lazy=False)(pname=(ns,"apexPluginCalls"), aname="_apexPluginCalls", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowAssignment",lazy=False)(pname=(ns,"assignments"), aname="_assignments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowChoice",lazy=False)(pname=(ns,"choices"), aname="_choices", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowConstant",lazy=False)(pname=(ns,"constants"), aname="_constants", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowDecision",lazy=False)(pname=(ns,"decisions"), aname="_decisions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowDynamicChoiceSet",lazy=False)(pname=(ns,"dynamicChoiceSets"), aname="_dynamicChoiceSets", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowFormula",lazy=False)(pname=(ns,"formulas"), aname="_formulas", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowRecordCreate",lazy=False)(pname=(ns,"recordCreates"), aname="_recordCreates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowRecordDelete",lazy=False)(pname=(ns,"recordDeletes"), aname="_recordDeletes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowRecordLookup",lazy=False)(pname=(ns,"recordLookups"), aname="_recordLookups", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowRecordUpdate",lazy=False)(pname=(ns,"recordUpdates"), aname="_recordUpdates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowScreen",lazy=False)(pname=(ns,"screens"), aname="_screens", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startElementReference"), aname="_startElementReference", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowStep",lazy=False)(pname=(ns,"steps"), aname="_steps", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowSubflow",lazy=False)(pname=(ns,"subflows"), aname="_subflows", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowTextTemplate",lazy=False)(pname=(ns,"textTemplates"), aname="_textTemplates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowVariable",lazy=False)(pname=(ns,"variables"), aname="_variables", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Flow_Def.__bases__:
                bases = list(ns0.Flow_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Flow_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowApexPluginCall_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowApexPluginCall")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowApexPluginCall_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"apexClass"), aname="_apexClass", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"connector"), aname="_connector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"faultConnector"), aname="_faultConnector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowApexPluginCallInputParameter",lazy=False)(pname=(ns,"inputParameters"), aname="_inputParameters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowApexPluginCallOutputParameter",lazy=False)(pname=(ns,"outputParameters"), aname="_outputParameters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowNode_Def not in ns0.FlowApexPluginCall_Def.__bases__:
                bases = list(ns0.FlowApexPluginCall_Def.__bases__)
                bases.insert(0, ns0.FlowNode_Def)
                ns0.FlowApexPluginCall_Def.__bases__ = tuple(bases)

            ns0.FlowNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowNode_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowNode")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowNode_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"locationX"), aname="_locationX", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"locationY"), aname="_locationY", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowElement_Def not in ns0.FlowNode_Def.__bases__:
                bases = list(ns0.FlowNode_Def.__bases__)
                bases.insert(0, ns0.FlowElement_Def)
                ns0.FlowNode_Def.__bases__ = tuple(bases)

            ns0.FlowElement_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowElement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowElement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowElement_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._name = None
                    return
            Holder.__name__ = "FlowElement_Holder"
            self.pyclass = Holder

    class FlowConnector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowConnector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowConnector_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"targetReference"), aname="_targetReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._targetReference = None
                    return
            Holder.__name__ = "FlowConnector_Holder"
            self.pyclass = Holder

    class FlowApexPluginCallInputParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowApexPluginCallInputParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowApexPluginCallInputParameter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowElementReferenceOrValue",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "FlowApexPluginCallInputParameter_Holder"
            self.pyclass = Holder

    class FlowElementReferenceOrValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowElementReferenceOrValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowElementReferenceOrValue_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"booleanValue"), aname="_booleanValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"dateValue"), aname="_dateValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"elementReference"), aname="_elementReference", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"numberValue"), aname="_numberValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"stringValue"), aname="_stringValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._booleanValue = None
                    self._dateValue = None
                    self._elementReference = None
                    self._numberValue = None
                    self._stringValue = None
                    return
            Holder.__name__ = "FlowElementReferenceOrValue_Holder"
            self.pyclass = Holder

    class FlowApexPluginCallOutputParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowApexPluginCallOutputParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowApexPluginCallOutputParameter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"assignToReference"), aname="_assignToReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._assignToReference = None
                    self._name = None
                    return
            Holder.__name__ = "FlowApexPluginCallOutputParameter_Holder"
            self.pyclass = Holder

    class FlowAssignment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowAssignment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowAssignment_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FlowAssignmentItem",lazy=False)(pname=(ns,"assignmentItems"), aname="_assignmentItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"connector"), aname="_connector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowNode_Def not in ns0.FlowAssignment_Def.__bases__:
                bases = list(ns0.FlowAssignment_Def.__bases__)
                bases.insert(0, ns0.FlowNode_Def)
                ns0.FlowAssignment_Def.__bases__ = tuple(bases)

            ns0.FlowNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowAssignmentItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowAssignmentItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowAssignmentItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"assignToReference"), aname="_assignToReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowAssignmentOperator",lazy=False)(pname=(ns,"operator"), aname="_operator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowElementReferenceOrValue",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._assignToReference = None
                    self._operator = None
                    self._value = None
                    return
            Holder.__name__ = "FlowAssignmentItem_Holder"
            self.pyclass = Holder

    class FlowChoice_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowChoice")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowChoice_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"choiceText"), aname="_choiceText", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowDataType",lazy=False)(pname=(ns,"dataType"), aname="_dataType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowChoiceUserInput",lazy=False)(pname=(ns,"userInput"), aname="_userInput", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowElementReferenceOrValue",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowElement_Def not in ns0.FlowChoice_Def.__bases__:
                bases = list(ns0.FlowChoice_Def.__bases__)
                bases.insert(0, ns0.FlowElement_Def)
                ns0.FlowChoice_Def.__bases__ = tuple(bases)

            ns0.FlowElement_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowDataType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowDataType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FlowChoiceUserInput_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowChoiceUserInput")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowChoiceUserInput_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"isRequired"), aname="_isRequired", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"promptText"), aname="_promptText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowInputValidationRule",lazy=False)(pname=(ns,"validationRule"), aname="_validationRule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._isRequired = None
                    self._promptText = None
                    self._validationRule = None
                    return
            Holder.__name__ = "FlowChoiceUserInput_Holder"
            self.pyclass = Holder

    class FlowInputValidationRule_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowInputValidationRule")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowInputValidationRule_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"errorMessage"), aname="_errorMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"formulaExpression"), aname="_formulaExpression", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorMessage = None
                    self._formulaExpression = None
                    return
            Holder.__name__ = "FlowInputValidationRule_Holder"
            self.pyclass = Holder

    class FlowConstant_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowConstant")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowConstant_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FlowDataType",lazy=False)(pname=(ns,"dataType"), aname="_dataType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowElementReferenceOrValue",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowElement_Def not in ns0.FlowConstant_Def.__bases__:
                bases = list(ns0.FlowConstant_Def.__bases__)
                bases.insert(0, ns0.FlowElement_Def)
                ns0.FlowConstant_Def.__bases__ = tuple(bases)

            ns0.FlowElement_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowDecision_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowDecision")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowDecision_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"defaultConnector"), aname="_defaultConnector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultConnectorLabel"), aname="_defaultConnectorLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowRule",lazy=False)(pname=(ns,"rules"), aname="_rules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowNode_Def not in ns0.FlowDecision_Def.__bases__:
                bases = list(ns0.FlowDecision_Def.__bases__)
                bases.insert(0, ns0.FlowNode_Def)
                ns0.FlowDecision_Def.__bases__ = tuple(bases)

            ns0.FlowNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowRule_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"conditionLogic"), aname="_conditionLogic", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowCondition",lazy=False)(pname=(ns,"conditions"), aname="_conditions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"connector"), aname="_connector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowElement_Def not in ns0.FlowRule_Def.__bases__:
                bases = list(ns0.FlowRule_Def.__bases__)
                bases.insert(0, ns0.FlowElement_Def)
                ns0.FlowRule_Def.__bases__ = tuple(bases)

            ns0.FlowElement_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowCondition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowCondition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowCondition_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"leftValueReference"), aname="_leftValueReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowComparisonOperator",lazy=False)(pname=(ns,"operator"), aname="_operator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowElementReferenceOrValue",lazy=False)(pname=(ns,"rightValue"), aname="_rightValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._leftValueReference = None
                    self._operator = None
                    self._rightValue = None
                    return
            Holder.__name__ = "FlowCondition_Holder"
            self.pyclass = Holder

    class FlowDynamicChoiceSet_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowDynamicChoiceSet")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowDynamicChoiceSet_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FlowDataType",lazy=False)(pname=(ns,"dataType"), aname="_dataType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"displayField"), aname="_displayField", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowRecordFilter",lazy=False)(pname=(ns,"filters"), aname="_filters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"limit"), aname="_limit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"object"), aname="_object", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowOutputFieldAssignment",lazy=False)(pname=(ns,"outputAssignments"), aname="_outputAssignments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sortField"), aname="_sortField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SortOrder",lazy=False)(pname=(ns,"sortOrder"), aname="_sortOrder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"valueField"), aname="_valueField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowElement_Def not in ns0.FlowDynamicChoiceSet_Def.__bases__:
                bases = list(ns0.FlowDynamicChoiceSet_Def.__bases__)
                bases.insert(0, ns0.FlowElement_Def)
                ns0.FlowDynamicChoiceSet_Def.__bases__ = tuple(bases)

            ns0.FlowElement_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowRecordFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowRecordFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowRecordFilter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowRecordFilterOperator",lazy=False)(pname=(ns,"operator"), aname="_operator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowElementReferenceOrValue",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._field = None
                    self._operator = None
                    self._value = None
                    return
            Holder.__name__ = "FlowRecordFilter_Holder"
            self.pyclass = Holder

    class FlowOutputFieldAssignment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowOutputFieldAssignment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowOutputFieldAssignment_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"assignToReference"), aname="_assignToReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._assignToReference = None
                    self._field = None
                    return
            Holder.__name__ = "FlowOutputFieldAssignment_Holder"
            self.pyclass = Holder

    class FlowFormula_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowFormula")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowFormula_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"expression"), aname="_expression", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"scale"), aname="_scale", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowElement_Def not in ns0.FlowFormula_Def.__bases__:
                bases = list(ns0.FlowFormula_Def.__bases__)
                bases.insert(0, ns0.FlowElement_Def)
                ns0.FlowFormula_Def.__bases__ = tuple(bases)

            ns0.FlowElement_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowRecordCreate_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowRecordCreate")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowRecordCreate_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"assignRecordIdToReference"), aname="_assignRecordIdToReference", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"connector"), aname="_connector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"faultConnector"), aname="_faultConnector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowInputFieldAssignment",lazy=False)(pname=(ns,"inputAssignments"), aname="_inputAssignments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"object"), aname="_object", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowNode_Def not in ns0.FlowRecordCreate_Def.__bases__:
                bases = list(ns0.FlowRecordCreate_Def.__bases__)
                bases.insert(0, ns0.FlowNode_Def)
                ns0.FlowRecordCreate_Def.__bases__ = tuple(bases)

            ns0.FlowNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowInputFieldAssignment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowInputFieldAssignment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowInputFieldAssignment_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowElementReferenceOrValue",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._field = None
                    self._value = None
                    return
            Holder.__name__ = "FlowInputFieldAssignment_Holder"
            self.pyclass = Holder

    class FlowRecordDelete_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowRecordDelete")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowRecordDelete_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"connector"), aname="_connector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"faultConnector"), aname="_faultConnector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowRecordFilter",lazy=False)(pname=(ns,"filters"), aname="_filters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"object"), aname="_object", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowNode_Def not in ns0.FlowRecordDelete_Def.__bases__:
                bases = list(ns0.FlowRecordDelete_Def.__bases__)
                bases.insert(0, ns0.FlowNode_Def)
                ns0.FlowRecordDelete_Def.__bases__ = tuple(bases)

            ns0.FlowNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowRecordLookup_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowRecordLookup")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowRecordLookup_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"connector"), aname="_connector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"faultConnector"), aname="_faultConnector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowRecordFilter",lazy=False)(pname=(ns,"filters"), aname="_filters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"object"), aname="_object", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowOutputFieldAssignment",lazy=False)(pname=(ns,"outputAssignments"), aname="_outputAssignments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sortField"), aname="_sortField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SortOrder",lazy=False)(pname=(ns,"sortOrder"), aname="_sortOrder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowNode_Def not in ns0.FlowRecordLookup_Def.__bases__:
                bases = list(ns0.FlowRecordLookup_Def.__bases__)
                bases.insert(0, ns0.FlowNode_Def)
                ns0.FlowRecordLookup_Def.__bases__ = tuple(bases)

            ns0.FlowNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowRecordUpdate_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowRecordUpdate")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowRecordUpdate_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"connector"), aname="_connector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"faultConnector"), aname="_faultConnector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowRecordFilter",lazy=False)(pname=(ns,"filters"), aname="_filters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowInputFieldAssignment",lazy=False)(pname=(ns,"inputAssignments"), aname="_inputAssignments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"object"), aname="_object", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowNode_Def not in ns0.FlowRecordUpdate_Def.__bases__:
                bases = list(ns0.FlowRecordUpdate_Def.__bases__)
                bases.insert(0, ns0.FlowNode_Def)
                ns0.FlowRecordUpdate_Def.__bases__ = tuple(bases)

            ns0.FlowNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowScreen_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowScreen")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowScreen_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"allowBack"), aname="_allowBack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowFinish"), aname="_allowFinish", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"connector"), aname="_connector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowScreenField",lazy=False)(pname=(ns,"fields"), aname="_fields", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"helpText"), aname="_helpText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowNode_Def not in ns0.FlowScreen_Def.__bases__:
                bases = list(ns0.FlowScreen_Def.__bases__)
                bases.insert(0, ns0.FlowNode_Def)
                ns0.FlowScreen_Def.__bases__ = tuple(bases)

            ns0.FlowNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowScreenField_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowScreenField")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowScreenField_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"choiceReferences"), aname="_choiceReferences", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowDataType",lazy=False)(pname=(ns,"dataType"), aname="_dataType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultSelectedChoiceReference"), aname="_defaultSelectedChoiceReference", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowElementReferenceOrValue",lazy=False)(pname=(ns,"defaultValue"), aname="_defaultValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fieldText"), aname="_fieldText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowScreenFieldType",lazy=False)(pname=(ns,"fieldType"), aname="_fieldType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"helpText"), aname="_helpText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isRequired"), aname="_isRequired", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"scale"), aname="_scale", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowInputValidationRule",lazy=False)(pname=(ns,"validationRule"), aname="_validationRule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowElement_Def not in ns0.FlowScreenField_Def.__bases__:
                bases = list(ns0.FlowScreenField_Def.__bases__)
                bases.insert(0, ns0.FlowElement_Def)
                ns0.FlowScreenField_Def.__bases__ = tuple(bases)

            ns0.FlowElement_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowStep_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowStep")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowStep_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"connectors"), aname="_connectors", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowNode_Def not in ns0.FlowStep_Def.__bases__:
                bases = list(ns0.FlowStep_Def.__bases__)
                bases.insert(0, ns0.FlowNode_Def)
                ns0.FlowStep_Def.__bases__ = tuple(bases)

            ns0.FlowNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowSubflow_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowSubflow")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowSubflow_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FlowConnector",lazy=False)(pname=(ns,"connector"), aname="_connector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"flowName"), aname="_flowName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowSubflowInputAssignment",lazy=False)(pname=(ns,"inputAssignments"), aname="_inputAssignments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowSubflowOutputAssignment",lazy=False)(pname=(ns,"outputAssignments"), aname="_outputAssignments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowNode_Def not in ns0.FlowSubflow_Def.__bases__:
                bases = list(ns0.FlowSubflow_Def.__bases__)
                bases.insert(0, ns0.FlowNode_Def)
                ns0.FlowSubflow_Def.__bases__ = tuple(bases)

            ns0.FlowNode_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowSubflowInputAssignment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowSubflowInputAssignment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowSubflowInputAssignment_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowElementReferenceOrValue",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "FlowSubflowInputAssignment_Holder"
            self.pyclass = Holder

    class FlowSubflowOutputAssignment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowSubflowOutputAssignment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FlowSubflowOutputAssignment_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"assignToReference"), aname="_assignToReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._assignToReference = None
                    self._name = None
                    return
            Holder.__name__ = "FlowSubflowOutputAssignment_Holder"
            self.pyclass = Holder

    class FlowTextTemplate_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowTextTemplate")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowTextTemplate_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"text"), aname="_text", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowElement_Def not in ns0.FlowTextTemplate_Def.__bases__:
                bases = list(ns0.FlowTextTemplate_Def.__bases__)
                bases.insert(0, ns0.FlowElement_Def)
                ns0.FlowTextTemplate_Def.__bases__ = tuple(bases)

            ns0.FlowElement_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FlowVariable_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowVariable")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.FlowVariable_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FlowDataType",lazy=False)(pname=(ns,"dataType"), aname="_dataType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isInput"), aname="_isInput", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isOutput"), aname="_isOutput", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"scale"), aname="_scale", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FlowElementReferenceOrValue",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.FlowElement_Def not in ns0.FlowVariable_Def.__bases__:
                bases = list(ns0.FlowVariable_Def.__bases__)
                bases.insert(0, ns0.FlowElement_Def)
                ns0.FlowVariable_Def.__bases__ = tuple(bases)

            ns0.FlowElement_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApexClass_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ApexClass")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApexClass_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"apiVersion"), aname="_apiVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PackageVersion",lazy=False)(pname=(ns,"packageVersions"), aname="_packageVersions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ApexCodeUnitStatus",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MetadataWithContent_Def not in ns0.ApexClass_Def.__bases__:
                bases = list(ns0.ApexClass_Def.__bases__)
                bases.insert(0, ns0.MetadataWithContent_Def)
                ns0.ApexClass_Def.__bases__ = tuple(bases)

            ns0.MetadataWithContent_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApexCodeUnitStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ApexCodeUnitStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ApexTrigger_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ApexTrigger")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApexTrigger_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"apiVersion"), aname="_apiVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PackageVersion",lazy=False)(pname=(ns,"packageVersions"), aname="_packageVersions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ApexCodeUnitStatus",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.MetadataWithContent_Def not in ns0.ApexTrigger_Def.__bases__:
                bases = list(ns0.ApexTrigger_Def.__bases__)
                bases.insert(0, ns0.MetadataWithContent_Def)
                ns0.ApexTrigger_Def.__bases__ = tuple(bases)

            ns0.MetadataWithContent_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Profile_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Profile")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Profile_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ProfileApplicationVisibility",lazy=False)(pname=(ns,"applicationVisibilities"), aname="_applicationVisibilities", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ProfileApexClassAccess",lazy=False)(pname=(ns,"classAccesses"), aname="_classAccesses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ProfileExternalDataSourceAccess",lazy=False)(pname=(ns,"externalDataSourceAccesses"), aname="_externalDataSourceAccesses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ProfileFieldLevelSecurity",lazy=False)(pname=(ns,"fieldPermissions"), aname="_fieldPermissions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ProfileLayoutAssignment",lazy=False)(pname=(ns,"layoutAssignments"), aname="_layoutAssignments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ProfileLoginHours",lazy=False)(pname=(ns,"loginHours"), aname="_loginHours", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ProfileLoginIpRange",lazy=False)(pname=(ns,"loginIpRanges"), aname="_loginIpRanges", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ProfileObjectPermissions",lazy=False)(pname=(ns,"objectPermissions"), aname="_objectPermissions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ProfileApexPageAccess",lazy=False)(pname=(ns,"pageAccesses"), aname="_pageAccesses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ProfileRecordTypeVisibility",lazy=False)(pname=(ns,"recordTypeVisibilities"), aname="_recordTypeVisibilities", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ProfileTabVisibility",lazy=False)(pname=(ns,"tabVisibilities"), aname="_tabVisibilities", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userLicense"), aname="_userLicense", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Profile_Def.__bases__:
                bases = list(ns0.Profile_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Profile_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProfileApplicationVisibility_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ProfileApplicationVisibility")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProfileApplicationVisibility_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"application"), aname="_application", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"default"), aname="_default", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"visible"), aname="_visible", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._application = None
                    self._default = None
                    self._visible = None
                    return
            Holder.__name__ = "ProfileApplicationVisibility_Holder"
            self.pyclass = Holder

    class ProfileApexClassAccess_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ProfileApexClassAccess")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProfileApexClassAccess_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"apexClass"), aname="_apexClass", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enabled"), aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apexClass = None
                    self._enabled = None
                    return
            Holder.__name__ = "ProfileApexClassAccess_Holder"
            self.pyclass = Holder

    class ProfileExternalDataSourceAccess_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ProfileExternalDataSourceAccess")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProfileExternalDataSourceAccess_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"enabled"), aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalDataSource"), aname="_externalDataSource", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._enabled = None
                    self._externalDataSource = None
                    return
            Holder.__name__ = "ProfileExternalDataSourceAccess_Holder"
            self.pyclass = Holder

    class ProfileFieldLevelSecurity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ProfileFieldLevelSecurity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProfileFieldLevelSecurity_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"editable"), aname="_editable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"readable"), aname="_readable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._editable = None
                    self._field = None
                    self._readable = None
                    return
            Holder.__name__ = "ProfileFieldLevelSecurity_Holder"
            self.pyclass = Holder

    class ProfileLayoutAssignment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ProfileLayoutAssignment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProfileLayoutAssignment_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"layout"), aname="_layout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"recordType"), aname="_recordType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._layout = None
                    self._recordType = None
                    return
            Holder.__name__ = "ProfileLayoutAssignment_Holder"
            self.pyclass = Holder

    class ProfileLoginHours_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ProfileLoginHours")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProfileLoginHours_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fridayEnd"), aname="_fridayEnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fridayStart"), aname="_fridayStart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mondayEnd"), aname="_mondayEnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mondayStart"), aname="_mondayStart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"saturdayEnd"), aname="_saturdayEnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"saturdayStart"), aname="_saturdayStart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sundayEnd"), aname="_sundayEnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sundayStart"), aname="_sundayStart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"thursdayEnd"), aname="_thursdayEnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"thursdayStart"), aname="_thursdayStart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tuesdayEnd"), aname="_tuesdayEnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"tuesdayStart"), aname="_tuesdayStart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"wednesdayEnd"), aname="_wednesdayEnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"wednesdayStart"), aname="_wednesdayStart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fridayEnd = None
                    self._fridayStart = None
                    self._mondayEnd = None
                    self._mondayStart = None
                    self._saturdayEnd = None
                    self._saturdayStart = None
                    self._sundayEnd = None
                    self._sundayStart = None
                    self._thursdayEnd = None
                    self._thursdayStart = None
                    self._tuesdayEnd = None
                    self._tuesdayStart = None
                    self._wednesdayEnd = None
                    self._wednesdayStart = None
                    return
            Holder.__name__ = "ProfileLoginHours_Holder"
            self.pyclass = Holder

    class ProfileLoginIpRange_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ProfileLoginIpRange")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProfileLoginIpRange_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"endAddress"), aname="_endAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startAddress"), aname="_startAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._endAddress = None
                    self._startAddress = None
                    return
            Holder.__name__ = "ProfileLoginIpRange_Holder"
            self.pyclass = Holder

    class ProfileObjectPermissions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ProfileObjectPermissions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProfileObjectPermissions_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"allowCreate"), aname="_allowCreate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowDelete"), aname="_allowDelete", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowEdit"), aname="_allowEdit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowRead"), aname="_allowRead", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"modifyAllRecords"), aname="_modifyAllRecords", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"object"), aname="_object", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"viewAllRecords"), aname="_viewAllRecords", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._allowCreate = None
                    self._allowDelete = None
                    self._allowEdit = None
                    self._allowRead = None
                    self._modifyAllRecords = None
                    self._object = None
                    self._viewAllRecords = None
                    return
            Holder.__name__ = "ProfileObjectPermissions_Holder"
            self.pyclass = Holder

    class ProfileApexPageAccess_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ProfileApexPageAccess")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProfileApexPageAccess_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"apexPage"), aname="_apexPage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enabled"), aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apexPage = None
                    self._enabled = None
                    return
            Holder.__name__ = "ProfileApexPageAccess_Holder"
            self.pyclass = Holder

    class ProfileRecordTypeVisibility_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ProfileRecordTypeVisibility")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProfileRecordTypeVisibility_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"default"), aname="_default", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"personAccountDefault"), aname="_personAccountDefault", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"recordType"), aname="_recordType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"visible"), aname="_visible", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._default = None
                    self._personAccountDefault = None
                    self._recordType = None
                    self._visible = None
                    return
            Holder.__name__ = "ProfileRecordTypeVisibility_Holder"
            self.pyclass = Holder

    class ProfileTabVisibility_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ProfileTabVisibility")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ProfileTabVisibility_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"tab"), aname="_tab", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","TabVisibility",lazy=False)(pname=(ns,"visibility"), aname="_visibility", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tab = None
                    self._visibility = None
                    return
            Holder.__name__ = "ProfileTabVisibility_Holder"
            self.pyclass = Holder

    class PermissionSet_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PermissionSet")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PermissionSet_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","PermissionSetApexClassAccess",lazy=False)(pname=(ns,"classAccesses"), aname="_classAccesses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PermissionSetExternalDataSourceAccess",lazy=False)(pname=(ns,"externalDataSourceAccesses"), aname="_externalDataSourceAccesses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PermissionSetFieldPermissions",lazy=False)(pname=(ns,"fieldPermissions"), aname="_fieldPermissions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PermissionSetObjectPermissions",lazy=False)(pname=(ns,"objectPermissions"), aname="_objectPermissions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PermissionSetApexPageAccess",lazy=False)(pname=(ns,"pageAccesses"), aname="_pageAccesses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PermissionSetTabSetting",lazy=False)(pname=(ns,"tabSettings"), aname="_tabSettings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userLicense"), aname="_userLicense", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PermissionSetUserPermission",lazy=False)(pname=(ns,"userPermissions"), aname="_userPermissions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.PermissionSet_Def.__bases__:
                bases = list(ns0.PermissionSet_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.PermissionSet_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PermissionSetApexClassAccess_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PermissionSetApexClassAccess")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PermissionSetApexClassAccess_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"apexClass"), aname="_apexClass", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enabled"), aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apexClass = None
                    self._enabled = None
                    return
            Holder.__name__ = "PermissionSetApexClassAccess_Holder"
            self.pyclass = Holder

    class PermissionSetExternalDataSourceAccess_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PermissionSetExternalDataSourceAccess")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PermissionSetExternalDataSourceAccess_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"enabled"), aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalDataSource"), aname="_externalDataSource", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._enabled = None
                    self._externalDataSource = None
                    return
            Holder.__name__ = "PermissionSetExternalDataSourceAccess_Holder"
            self.pyclass = Holder

    class PermissionSetFieldPermissions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PermissionSetFieldPermissions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PermissionSetFieldPermissions_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"editable"), aname="_editable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"field"), aname="_field", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"readable"), aname="_readable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._editable = None
                    self._field = None
                    self._readable = None
                    return
            Holder.__name__ = "PermissionSetFieldPermissions_Holder"
            self.pyclass = Holder

    class PermissionSetObjectPermissions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PermissionSetObjectPermissions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PermissionSetObjectPermissions_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"allowCreate"), aname="_allowCreate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowDelete"), aname="_allowDelete", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowEdit"), aname="_allowEdit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowRead"), aname="_allowRead", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"modifyAllRecords"), aname="_modifyAllRecords", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"object"), aname="_object", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"viewAllRecords"), aname="_viewAllRecords", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._allowCreate = None
                    self._allowDelete = None
                    self._allowEdit = None
                    self._allowRead = None
                    self._modifyAllRecords = None
                    self._object = None
                    self._viewAllRecords = None
                    return
            Holder.__name__ = "PermissionSetObjectPermissions_Holder"
            self.pyclass = Holder

    class PermissionSetApexPageAccess_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PermissionSetApexPageAccess")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PermissionSetApexPageAccess_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"apexPage"), aname="_apexPage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enabled"), aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apexPage = None
                    self._enabled = None
                    return
            Holder.__name__ = "PermissionSetApexPageAccess_Holder"
            self.pyclass = Holder

    class PermissionSetTabSetting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PermissionSetTabSetting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PermissionSetTabSetting_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"tab"), aname="_tab", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PermissionSetTabVisibility",lazy=False)(pname=(ns,"visibility"), aname="_visibility", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tab = None
                    self._visibility = None
                    return
            Holder.__name__ = "PermissionSetTabSetting_Holder"
            self.pyclass = Holder

    class PermissionSetUserPermission_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PermissionSetUserPermission")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PermissionSetUserPermission_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"enabled"), aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._enabled = None
                    self._name = None
                    return
            Holder.__name__ = "PermissionSetUserPermission_Holder"
            self.pyclass = Holder

    class DataCategoryGroup_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DataCategoryGroup")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DataCategoryGroup_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DataCategory",lazy=False)(pname=(ns,"dataCategory"), aname="_dataCategory", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ObjectUsage",lazy=False)(pname=(ns,"objectUsage"), aname="_objectUsage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.DataCategoryGroup_Def.__bases__:
                bases = list(ns0.DataCategoryGroup_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.DataCategoryGroup_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DataCategory_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DataCategory")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DataCategory_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","DataCategory",lazy=False)(pname=(ns,"dataCategory"), aname="_dataCategory", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dataCategory = []
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "DataCategory_Holder"
            self.pyclass = Holder

    class ObjectUsage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ObjectUsage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ObjectUsage_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"object"), aname="_object", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._object = []
                    return
            Holder.__name__ = "ObjectUsage_Holder"
            self.pyclass = Holder

    class RemoteSiteSetting_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RemoteSiteSetting")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RemoteSiteSetting_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"disableProtocolSecurity"), aname="_disableProtocolSecurity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isActive"), aname="_isActive", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.RemoteSiteSetting_Def.__bases__:
                bases = list(ns0.RemoteSiteSetting_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.RemoteSiteSetting_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Package_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Package")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Package_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","APIAccessLevel",lazy=False)(pname=(ns,"apiAccessLevel"), aname="_apiAccessLevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"namespacePrefix"), aname="_namespacePrefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ProfileObjectPermissions",lazy=False)(pname=(ns,"objectPermissions"), aname="_objectPermissions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"postInstallClass"), aname="_postInstallClass", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"setupWeblink"), aname="_setupWeblink", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PackageTypeMembers",lazy=False)(pname=(ns,"types"), aname="_types", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"uninstallClass"), aname="_uninstallClass", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"version"), aname="_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Package_Def.__bases__:
                bases = list(ns0.Package_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Package_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PackageTypeMembers_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PackageTypeMembers")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PackageTypeMembers_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"members"), aname="_members", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._members = []
                    self._name = None
                    return
            Holder.__name__ = "PackageTypeMembers_Holder"
            self.pyclass = Holder

    class AuthProvider_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AuthProvider")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthProvider_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"consumerKey"), aname="_consumerKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"consumerSecret"), aname="_consumerSecret", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorUrl"), aname="_errorUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"executionUser"), aname="_executionUser", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"friendlyName"), aname="_friendlyName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"portal"), aname="_portal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","AuthProviderType",lazy=False)(pname=(ns,"providerType"), aname="_providerType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"registrationHandler"), aname="_registrationHandler", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.AuthProvider_Def.__bases__:
                bases = list(ns0.AuthProvider_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.AuthProvider_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthProviderType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AuthProviderType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class KnowledgeSettings_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "KnowledgeSettings")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.KnowledgeSettings_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","KnowledgeAnswerSettings",lazy=False)(pname=(ns,"answers"), aname="_answers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","KnowledgeCaseSettings",lazy=False)(pname=(ns,"cases"), aname="_cases", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultLanguage"), aname="_defaultLanguage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableCreateEditOnArticlesTab"), aname="_enableCreateEditOnArticlesTab", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableExternalMediaContent"), aname="_enableExternalMediaContent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableKnowledge"), aname="_enableKnowledge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showArticleSummariesCustomerPortal"), aname="_showArticleSummariesCustomerPortal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showArticleSummariesInternalApp"), aname="_showArticleSummariesInternalApp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showArticleSummariesPartnerPortal"), aname="_showArticleSummariesPartnerPortal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showValidationStatusField"), aname="_showValidationStatusField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.KnowledgeSettings_Def.__bases__:
                bases = list(ns0.KnowledgeSettings_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.KnowledgeSettings_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class KnowledgeAnswerSettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "KnowledgeAnswerSettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.KnowledgeAnswerSettings_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"assignTo"), aname="_assignTo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultArticleType"), aname="_defaultArticleType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableArticleCreation"), aname="_enableArticleCreation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._assignTo = None
                    self._defaultArticleType = None
                    self._enableArticleCreation = None
                    return
            Holder.__name__ = "KnowledgeAnswerSettings_Holder"
            self.pyclass = Holder

    class KnowledgeCaseSettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "KnowledgeCaseSettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.KnowledgeCaseSettings_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"articlePDFCreationProfile"), aname="_articlePDFCreationProfile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","KnowledgeSitesSettings",lazy=False)(pname=(ns,"articlePublicSharingSites"), aname="_articlePublicSharingSites", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","KnowledgeSitesSettings",lazy=False)(pname=(ns,"articlePublicSharingSitesChatterAnswers"), aname="_articlePublicSharingSitesChatterAnswers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"assignTo"), aname="_assignTo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"customizationClass"), aname="_customizationClass", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultContributionArticleType"), aname="_defaultContributionArticleType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","KnowledgeCaseEditor",lazy=False)(pname=(ns,"editor"), aname="_editor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableArticleCreation"), aname="_enableArticleCreation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableArticlePublicSharingSites"), aname="_enableArticlePublicSharingSites", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"useProfileForPDFCreation"), aname="_useProfileForPDFCreation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._articlePDFCreationProfile = None
                    self._articlePublicSharingSites = None
                    self._articlePublicSharingSitesChatterAnswers = None
                    self._assignTo = None
                    self._customizationClass = None
                    self._defaultContributionArticleType = None
                    self._editor = None
                    self._enableArticleCreation = None
                    self._enableArticlePublicSharingSites = None
                    self._useProfileForPDFCreation = None
                    return
            Holder.__name__ = "KnowledgeCaseSettings_Holder"
            self.pyclass = Holder

    class KnowledgeSitesSettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "KnowledgeSitesSettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.KnowledgeSitesSettings_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"site"), aname="_site", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._site = []
                    return
            Holder.__name__ = "KnowledgeSitesSettings_Holder"
            self.pyclass = Holder

    class CustomSite_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomSite")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomSite_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowHomePage"), aname="_allowHomePage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowStandardAnswersPages"), aname="_allowStandardAnswersPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowStandardIdeasPages"), aname="_allowStandardIdeasPages", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowStandardLookups"), aname="_allowStandardLookups", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowStandardSearch"), aname="_allowStandardSearch", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"analyticsTrackingCode"), aname="_analyticsTrackingCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authorizationRequiredPage"), aname="_authorizationRequiredPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bandwidthExceededPage"), aname="_bandwidthExceededPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"changePasswordPage"), aname="_changePasswordPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"chatterAnswersForgotPasswordConfirmPage"), aname="_chatterAnswersForgotPasswordConfirmPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"chatterAnswersForgotPasswordPage"), aname="_chatterAnswersForgotPasswordPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"chatterAnswersHelpPage"), aname="_chatterAnswersHelpPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"chatterAnswersLoginPage"), aname="_chatterAnswersLoginPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"chatterAnswersRegistrationPage"), aname="_chatterAnswersRegistrationPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SiteWebAddress",lazy=False)(pname=(ns,"customWebAddresses"), aname="_customWebAddresses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"favoriteIcon"), aname="_favoriteIcon", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fileNotFoundPage"), aname="_fileNotFoundPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"genericErrorPage"), aname="_genericErrorPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"guestProfile"), aname="_guestProfile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"inMaintenancePage"), aname="_inMaintenancePage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"inactiveIndexPage"), aname="_inactiveIndexPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"indexPage"), aname="_indexPage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"masterLabel"), aname="_masterLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"myProfilePage"), aname="_myProfilePage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"portal"), aname="_portal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"requireInsecurePortalAccess"), aname="_requireInsecurePortalAccess", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"robotsTxtPage"), aname="_robotsTxtPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"rootComponent"), aname="_rootComponent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"serverIsDown"), aname="_serverIsDown", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"siteAdmin"), aname="_siteAdmin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SiteRedirectMapping",lazy=False)(pname=(ns,"siteRedirectMappings"), aname="_siteRedirectMappings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"siteTemplate"), aname="_siteTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SiteType",lazy=False)(pname=(ns,"siteType"), aname="_siteType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"subdomain"), aname="_subdomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"urlPathPrefix"), aname="_urlPathPrefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CustomSite_Def.__bases__:
                bases = list(ns0.CustomSite_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CustomSite_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SiteWebAddress_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SiteWebAddress")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SiteWebAddress_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"certificate"), aname="_certificate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"domainName"), aname="_domainName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"primary"), aname="_primary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._certificate = None
                    self._domainName = None
                    self._primary = None
                    return
            Holder.__name__ = "SiteWebAddress_Holder"
            self.pyclass = Holder

    class SiteRedirectMapping_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SiteRedirectMapping")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SiteRedirectMapping_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","SiteRedirect",lazy=False)(pname=(ns,"action"), aname="_action", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isActive"), aname="_isActive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"source"), aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"target"), aname="_target", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._action = None
                    self._isActive = None
                    self._source = None
                    self._target = None
                    return
            Holder.__name__ = "SiteRedirectMapping_Holder"
            self.pyclass = Holder

    class SiteRedirect_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SiteRedirect")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SiteType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SiteType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ShareAccessLevelReadEdit_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ShareAccessLevelReadEdit")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ShareAccessLevelNoAll_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ShareAccessLevelNoAll")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ShareAccessLevelNoNone_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ShareAccessLevelNoNone")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LeadSharingRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LeadSharingRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LeadSharingRules_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","LeadCriteriaBasedSharingRule",lazy=False)(pname=(ns,"criteriaBasedRules"), aname="_criteriaBasedRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LeadOwnerSharingRule",lazy=False)(pname=(ns,"ownerRules"), aname="_ownerRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.SharingRules_Def not in ns0.LeadSharingRules_Def.__bases__:
                bases = list(ns0.LeadSharingRules_Def.__bases__)
                bases.insert(0, ns0.SharingRules_Def)
                ns0.LeadSharingRules_Def.__bases__ = tuple(bases)

            ns0.SharingRules_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LeadCriteriaBasedSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LeadCriteriaBasedSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LeadCriteriaBasedSharingRule_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelReadEdit",lazy=False)(pname=(ns,"leadAccessLevel"), aname="_leadAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.CriteriaBasedSharingRule_Def not in ns0.LeadCriteriaBasedSharingRule_Def.__bases__:
                bases = list(ns0.LeadCriteriaBasedSharingRule_Def.__bases__)
                bases.insert(0, ns0.CriteriaBasedSharingRule_Def)
                ns0.LeadCriteriaBasedSharingRule_Def.__bases__ = tuple(bases)

            ns0.CriteriaBasedSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LeadOwnerSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LeadOwnerSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LeadOwnerSharingRule_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelReadEdit",lazy=False)(pname=(ns,"leadAccessLevel"), aname="_leadAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OwnerSharingRule_Def not in ns0.LeadOwnerSharingRule_Def.__bases__:
                bases = list(ns0.LeadOwnerSharingRule_Def.__bases__)
                bases.insert(0, ns0.OwnerSharingRule_Def)
                ns0.LeadOwnerSharingRule_Def.__bases__ = tuple(bases)

            ns0.OwnerSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignSharingRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CampaignSharingRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignSharingRules_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CampaignCriteriaBasedSharingRule",lazy=False)(pname=(ns,"criteriaBasedRules"), aname="_criteriaBasedRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CampaignOwnerSharingRule",lazy=False)(pname=(ns,"ownerRules"), aname="_ownerRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.SharingRules_Def not in ns0.CampaignSharingRules_Def.__bases__:
                bases = list(ns0.CampaignSharingRules_Def.__bases__)
                bases.insert(0, ns0.SharingRules_Def)
                ns0.CampaignSharingRules_Def.__bases__ = tuple(bases)

            ns0.SharingRules_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignCriteriaBasedSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CampaignCriteriaBasedSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignCriteriaBasedSharingRule_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoNone",lazy=False)(pname=(ns,"campaignAccessLevel"), aname="_campaignAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.CriteriaBasedSharingRule_Def not in ns0.CampaignCriteriaBasedSharingRule_Def.__bases__:
                bases = list(ns0.CampaignCriteriaBasedSharingRule_Def.__bases__)
                bases.insert(0, ns0.CriteriaBasedSharingRule_Def)
                ns0.CampaignCriteriaBasedSharingRule_Def.__bases__ = tuple(bases)

            ns0.CriteriaBasedSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CampaignOwnerSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CampaignOwnerSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CampaignOwnerSharingRule_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoNone",lazy=False)(pname=(ns,"campaignAccessLevel"), aname="_campaignAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OwnerSharingRule_Def not in ns0.CampaignOwnerSharingRule_Def.__bases__:
                bases = list(ns0.CampaignOwnerSharingRule_Def.__bases__)
                bases.insert(0, ns0.OwnerSharingRule_Def)
                ns0.CampaignOwnerSharingRule_Def.__bases__ = tuple(bases)

            ns0.OwnerSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CaseSharingRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CaseSharingRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CaseSharingRules_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CaseCriteriaBasedSharingRule",lazy=False)(pname=(ns,"criteriaBasedRules"), aname="_criteriaBasedRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CaseOwnerSharingRule",lazy=False)(pname=(ns,"ownerRules"), aname="_ownerRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.SharingRules_Def not in ns0.CaseSharingRules_Def.__bases__:
                bases = list(ns0.CaseSharingRules_Def.__bases__)
                bases.insert(0, ns0.SharingRules_Def)
                ns0.CaseSharingRules_Def.__bases__ = tuple(bases)

            ns0.SharingRules_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CaseCriteriaBasedSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CaseCriteriaBasedSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CaseCriteriaBasedSharingRule_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelReadEdit",lazy=False)(pname=(ns,"caseAccessLevel"), aname="_caseAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.CriteriaBasedSharingRule_Def not in ns0.CaseCriteriaBasedSharingRule_Def.__bases__:
                bases = list(ns0.CaseCriteriaBasedSharingRule_Def.__bases__)
                bases.insert(0, ns0.CriteriaBasedSharingRule_Def)
                ns0.CaseCriteriaBasedSharingRule_Def.__bases__ = tuple(bases)

            ns0.CriteriaBasedSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CaseOwnerSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CaseOwnerSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CaseOwnerSharingRule_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelReadEdit",lazy=False)(pname=(ns,"caseAccessLevel"), aname="_caseAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OwnerSharingRule_Def not in ns0.CaseOwnerSharingRule_Def.__bases__:
                bases = list(ns0.CaseOwnerSharingRule_Def.__bases__)
                bases.insert(0, ns0.OwnerSharingRule_Def)
                ns0.CaseOwnerSharingRule_Def.__bases__ = tuple(bases)

            ns0.OwnerSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContactSharingRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ContactSharingRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ContactSharingRules_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ContactCriteriaBasedSharingRule",lazy=False)(pname=(ns,"criteriaBasedRules"), aname="_criteriaBasedRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ContactOwnerSharingRule",lazy=False)(pname=(ns,"ownerRules"), aname="_ownerRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.SharingRules_Def not in ns0.ContactSharingRules_Def.__bases__:
                bases = list(ns0.ContactSharingRules_Def.__bases__)
                bases.insert(0, ns0.SharingRules_Def)
                ns0.ContactSharingRules_Def.__bases__ = tuple(bases)

            ns0.SharingRules_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContactCriteriaBasedSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ContactCriteriaBasedSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ContactCriteriaBasedSharingRule_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelReadEdit",lazy=False)(pname=(ns,"contactAccessLevel"), aname="_contactAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.CriteriaBasedSharingRule_Def not in ns0.ContactCriteriaBasedSharingRule_Def.__bases__:
                bases = list(ns0.ContactCriteriaBasedSharingRule_Def.__bases__)
                bases.insert(0, ns0.CriteriaBasedSharingRule_Def)
                ns0.ContactCriteriaBasedSharingRule_Def.__bases__ = tuple(bases)

            ns0.CriteriaBasedSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContactOwnerSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ContactOwnerSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ContactOwnerSharingRule_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelReadEdit",lazy=False)(pname=(ns,"contactAccessLevel"), aname="_contactAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OwnerSharingRule_Def not in ns0.ContactOwnerSharingRule_Def.__bases__:
                bases = list(ns0.ContactOwnerSharingRule_Def.__bases__)
                bases.insert(0, ns0.OwnerSharingRule_Def)
                ns0.ContactOwnerSharingRule_Def.__bases__ = tuple(bases)

            ns0.OwnerSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OpportunitySharingRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "OpportunitySharingRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OpportunitySharingRules_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","OpportunityCriteriaBasedSharingRule",lazy=False)(pname=(ns,"criteriaBasedRules"), aname="_criteriaBasedRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","OpportunityOwnerSharingRule",lazy=False)(pname=(ns,"ownerRules"), aname="_ownerRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.SharingRules_Def not in ns0.OpportunitySharingRules_Def.__bases__:
                bases = list(ns0.OpportunitySharingRules_Def.__bases__)
                bases.insert(0, ns0.SharingRules_Def)
                ns0.OpportunitySharingRules_Def.__bases__ = tuple(bases)

            ns0.SharingRules_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OpportunityCriteriaBasedSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "OpportunityCriteriaBasedSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OpportunityCriteriaBasedSharingRule_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelReadEdit",lazy=False)(pname=(ns,"opportunityAccessLevel"), aname="_opportunityAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.CriteriaBasedSharingRule_Def not in ns0.OpportunityCriteriaBasedSharingRule_Def.__bases__:
                bases = list(ns0.OpportunityCriteriaBasedSharingRule_Def.__bases__)
                bases.insert(0, ns0.CriteriaBasedSharingRule_Def)
                ns0.OpportunityCriteriaBasedSharingRule_Def.__bases__ = tuple(bases)

            ns0.CriteriaBasedSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OpportunityOwnerSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "OpportunityOwnerSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OpportunityOwnerSharingRule_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelReadEdit",lazy=False)(pname=(ns,"opportunityAccessLevel"), aname="_opportunityAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OwnerSharingRule_Def not in ns0.OpportunityOwnerSharingRule_Def.__bases__:
                bases = list(ns0.OpportunityOwnerSharingRule_Def.__bases__)
                bases.insert(0, ns0.OwnerSharingRule_Def)
                ns0.OpportunityOwnerSharingRule_Def.__bases__ = tuple(bases)

            ns0.OwnerSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AccountSharingRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AccountSharingRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AccountSharingRules_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","AccountCriteriaBasedSharingRule",lazy=False)(pname=(ns,"criteriaBasedRules"), aname="_criteriaBasedRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","AccountOwnerSharingRule",lazy=False)(pname=(ns,"ownerRules"), aname="_ownerRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.SharingRules_Def not in ns0.AccountSharingRules_Def.__bases__:
                bases = list(ns0.AccountSharingRules_Def.__bases__)
                bases.insert(0, ns0.SharingRules_Def)
                ns0.AccountSharingRules_Def.__bases__ = tuple(bases)

            ns0.SharingRules_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AccountCriteriaBasedSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AccountCriteriaBasedSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AccountCriteriaBasedSharingRule_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoNone",lazy=False)(pname=(ns,"accountAccessLevel"), aname="_accountAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoAll",lazy=False)(pname=(ns,"caseAccessLevel"), aname="_caseAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoAll",lazy=False)(pname=(ns,"contactAccessLevel"), aname="_contactAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoAll",lazy=False)(pname=(ns,"opportunityAccessLevel"), aname="_opportunityAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.CriteriaBasedSharingRule_Def not in ns0.AccountCriteriaBasedSharingRule_Def.__bases__:
                bases = list(ns0.AccountCriteriaBasedSharingRule_Def.__bases__)
                bases.insert(0, ns0.CriteriaBasedSharingRule_Def)
                ns0.AccountCriteriaBasedSharingRule_Def.__bases__ = tuple(bases)

            ns0.CriteriaBasedSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AccountOwnerSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AccountOwnerSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AccountOwnerSharingRule_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoNone",lazy=False)(pname=(ns,"accountAccessLevel"), aname="_accountAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoAll",lazy=False)(pname=(ns,"caseAccessLevel"), aname="_caseAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoAll",lazy=False)(pname=(ns,"contactAccessLevel"), aname="_contactAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoAll",lazy=False)(pname=(ns,"opportunityAccessLevel"), aname="_opportunityAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OwnerSharingRule_Def not in ns0.AccountOwnerSharingRule_Def.__bases__:
                bases = list(ns0.AccountOwnerSharingRule_Def.__bases__)
                bases.insert(0, ns0.OwnerSharingRule_Def)
                ns0.AccountOwnerSharingRule_Def.__bases__ = tuple(bases)

            ns0.OwnerSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AccountTerritorySharingRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AccountTerritorySharingRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AccountTerritorySharingRules_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","AccountTerritorySharingRule",lazy=False)(pname=(ns,"rules"), aname="_rules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.SharingRules_Def not in ns0.AccountTerritorySharingRules_Def.__bases__:
                bases = list(ns0.AccountTerritorySharingRules_Def.__bases__)
                bases.insert(0, ns0.SharingRules_Def)
                ns0.AccountTerritorySharingRules_Def.__bases__ = tuple(bases)

            ns0.SharingRules_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AccountTerritorySharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AccountTerritorySharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AccountTerritorySharingRule_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoNone",lazy=False)(pname=(ns,"accountAccessLevel"), aname="_accountAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoAll",lazy=False)(pname=(ns,"caseAccessLevel"), aname="_caseAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoAll",lazy=False)(pname=(ns,"contactAccessLevel"), aname="_contactAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ShareAccessLevelNoAll",lazy=False)(pname=(ns,"opportunityAccessLevel"), aname="_opportunityAccessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OwnerSharingRule_Def not in ns0.AccountTerritorySharingRule_Def.__bases__:
                bases = list(ns0.AccountTerritorySharingRule_Def.__bases__)
                bases.insert(0, ns0.OwnerSharingRule_Def)
                ns0.AccountTerritorySharingRule_Def.__bases__ = tuple(bases)

            ns0.OwnerSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomObjectSharingRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomObjectSharingRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomObjectSharingRules_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CustomObjectCriteriaBasedSharingRule",lazy=False)(pname=(ns,"criteriaBasedRules"), aname="_criteriaBasedRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CustomObjectOwnerSharingRule",lazy=False)(pname=(ns,"ownerRules"), aname="_ownerRules", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.SharingRules_Def not in ns0.CustomObjectSharingRules_Def.__bases__:
                bases = list(ns0.CustomObjectSharingRules_Def.__bases__)
                bases.insert(0, ns0.SharingRules_Def)
                ns0.CustomObjectSharingRules_Def.__bases__ = tuple(bases)

            ns0.SharingRules_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomObjectCriteriaBasedSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomObjectCriteriaBasedSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomObjectCriteriaBasedSharingRule_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"accessLevel"), aname="_accessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"booleanFilter"), aname="_booleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.CriteriaBasedSharingRule_Def not in ns0.CustomObjectCriteriaBasedSharingRule_Def.__bases__:
                bases = list(ns0.CustomObjectCriteriaBasedSharingRule_Def.__bases__)
                bases.insert(0, ns0.CriteriaBasedSharingRule_Def)
                ns0.CustomObjectCriteriaBasedSharingRule_Def.__bases__ = tuple(bases)

            ns0.CriteriaBasedSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomObjectOwnerSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomObjectOwnerSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CustomObjectOwnerSharingRule_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"accessLevel"), aname="_accessLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OwnerSharingRule_Def not in ns0.CustomObjectOwnerSharingRule_Def.__bases__:
                bases = list(ns0.CustomObjectOwnerSharingRule_Def.__bases__)
                bases.insert(0, ns0.OwnerSharingRule_Def)
                ns0.CustomObjectOwnerSharingRule_Def.__bases__ = tuple(bases)

            ns0.OwnerSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SecuritySettings_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SecuritySettings")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SecuritySettings_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","NetworkAccess",lazy=False)(pname=(ns,"networkAccess"), aname="_networkAccess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PasswordPolicies",lazy=False)(pname=(ns,"passwordPolicies"), aname="_passwordPolicies", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SessionSettings",lazy=False)(pname=(ns,"sessionSettings"), aname="_sessionSettings", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.SecuritySettings_Def.__bases__:
                bases = list(ns0.SecuritySettings_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.SecuritySettings_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NetworkAccess_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "NetworkAccess")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.NetworkAccess_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","IpRange",lazy=False)(pname=(ns,"ipRanges"), aname="_ipRanges", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipRanges = []
                    return
            Holder.__name__ = "NetworkAccess_Holder"
            self.pyclass = Holder

    class IpRange_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "IpRange")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IpRange_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"end"), aname="_end", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"start"), aname="_start", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._end = None
                    self._start = None
                    return
            Holder.__name__ = "IpRange_Holder"
            self.pyclass = Holder

    class PasswordPolicies_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PasswordPolicies")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PasswordPolicies_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiOnlyUserHomePageURL"), aname="_apiOnlyUserHomePageURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Complexity",lazy=False)(pname=(ns,"complexity"), aname="_complexity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Expiration",lazy=False)(pname=(ns,"expiration"), aname="_expiration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"historyRestriction"), aname="_historyRestriction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LockoutInterval",lazy=False)(pname=(ns,"lockoutInterval"), aname="_lockoutInterval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","MaxLoginAttempts",lazy=False)(pname=(ns,"maxLoginAttempts"), aname="_maxLoginAttempts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","MinPasswordLength",lazy=False)(pname=(ns,"minPasswordLength"), aname="_minPasswordLength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"passwordAssistanceMessage"), aname="_passwordAssistanceMessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"passwordAssistanceURL"), aname="_passwordAssistanceURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","QuestionRestriction",lazy=False)(pname=(ns,"questionRestriction"), aname="_questionRestriction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiOnlyUserHomePageURL = None
                    self._complexity = None
                    self._expiration = None
                    self._historyRestriction = None
                    self._lockoutInterval = None
                    self._maxLoginAttempts = None
                    self._minPasswordLength = None
                    self._passwordAssistanceMessage = None
                    self._passwordAssistanceURL = None
                    self._questionRestriction = None
                    return
            Holder.__name__ = "PasswordPolicies_Holder"
            self.pyclass = Holder

    class SessionSettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SessionSettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SessionSettings_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"disableTimeoutWarning"), aname="_disableTimeoutWarning", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableCSRFOnGet"), aname="_enableCSRFOnGet", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableCSRFOnPost"), aname="_enableCSRFOnPost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableCacheAndAutocomplete"), aname="_enableCacheAndAutocomplete", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableClickjackNonsetupSFDC"), aname="_enableClickjackNonsetupSFDC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableClickjackNonsetupUser"), aname="_enableClickjackNonsetupUser", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableClickjackSetup"), aname="_enableClickjackSetup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableSMSIdentity"), aname="_enableSMSIdentity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"forceRelogin"), aname="_forceRelogin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"lockSessionsToIp"), aname="_lockSessionsToIp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SessionTimeout",lazy=False)(pname=(ns,"sessionTimeout"), aname="_sessionTimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._disableTimeoutWarning = None
                    self._enableCSRFOnGet = None
                    self._enableCSRFOnPost = None
                    self._enableCacheAndAutocomplete = None
                    self._enableClickjackNonsetupSFDC = None
                    self._enableClickjackNonsetupUser = None
                    self._enableClickjackSetup = None
                    self._enableSMSIdentity = None
                    self._forceRelogin = None
                    self._lockSessionsToIp = None
                    self._sessionTimeout = None
                    return
            Holder.__name__ = "SessionSettings_Holder"
            self.pyclass = Holder

    class IdeasSettings_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "IdeasSettings")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.IdeasSettings_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"enableIdeaThemes"), aname="_enableIdeaThemes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableIdeas"), aname="_enableIdeas", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"halfLife"), aname="_halfLife", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.IdeasSettings_Def.__bases__:
                bases = list(ns0.IdeasSettings_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.IdeasSettings_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ChatterAnswersSettings_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ChatterAnswersSettings")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ChatterAnswersSettings_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"emailFollowersOnBestAnswer"), aname="_emailFollowersOnBestAnswer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"emailFollowersOnReply"), aname="_emailFollowersOnReply", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"emailOwnerOnPrivateReply"), aname="_emailOwnerOnPrivateReply", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"emailOwnerOnReply"), aname="_emailOwnerOnReply", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableChatterAnswers"), aname="_enableChatterAnswers", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableFacebookSSO"), aname="_enableFacebookSSO", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableOptimizeQuestionFlow"), aname="_enableOptimizeQuestionFlow", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableReputation"), aname="_enableReputation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableRichTextEditor"), aname="_enableRichTextEditor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"facebookAuthProvider"), aname="_facebookAuthProvider", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showInPortals"), aname="_showInPortals", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.ChatterAnswersSettings_Def.__bases__:
                bases = list(ns0.ChatterAnswersSettings_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.ChatterAnswersSettings_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Community_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Community")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Community_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"communityFeedPage"), aname="_communityFeedPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"emailFooterDocument"), aname="_emailFooterDocument", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"emailHeaderDocument"), aname="_emailHeaderDocument", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableChatterAnswers"), aname="_enableChatterAnswers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enablePrivateQuestions"), aname="_enablePrivateQuestions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expertsGroup"), aname="_expertsGroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"portal"), aname="_portal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"portalEmailNotificationUrl"), aname="_portalEmailNotificationUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","ReputationLevels",lazy=False)(pname=(ns,"reputationLevels"), aname="_reputationLevels", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showInPortal"), aname="_showInPortal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"site"), aname="_site", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Community_Def.__bases__:
                bases = list(ns0.Community_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Community_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReputationLevels_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReputationLevels")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReputationLevels_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ChatterAnswersReputationLevel",lazy=False)(pname=(ns,"reputationLevel"), aname="_reputationLevel", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._reputationLevel = []
                    return
            Holder.__name__ = "ReputationLevels_Holder"
            self.pyclass = Holder

    class ChatterAnswersReputationLevel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ChatterAnswersReputationLevel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ChatterAnswersReputationLevel_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "ChatterAnswersReputationLevel_Holder"
            self.pyclass = Holder

    class ContractSettings_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ContractSettings")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ContractSettings_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"autoCalculateEndDate"), aname="_autoCalculateEndDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"autoExpirationDelay"), aname="_autoExpirationDelay", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"autoExpirationRecipient"), aname="_autoExpirationRecipient", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"autoExpireContracts"), aname="_autoExpireContracts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableContractHistoryTracking"), aname="_enableContractHistoryTracking", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"notifyOwnersOnContractExpiration"), aname="_notifyOwnersOnContractExpiration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.ContractSettings_Def.__bases__:
                bases = list(ns0.ContractSettings_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.ContractSettings_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CallCenter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CallCenter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CallCenter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"adapterUrl"), aname="_adapterUrl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"customSettings"), aname="_customSettings", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"displayName"), aname="_displayName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"displayNameLabel"), aname="_displayNameLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"internalNameLabel"), aname="_internalNameLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","CallCenterSection",lazy=False)(pname=(ns,"sections"), aname="_sections", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"version"), aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CallCenter_Def.__bases__:
                bases = list(ns0.CallCenter_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CallCenter_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CallCenterSection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CallCenterSection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CallCenterSection_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","CallCenterItem",lazy=False)(pname=(ns,"items"), aname="_items", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._items = []
                    self._label = None
                    self._name = None
                    return
            Holder.__name__ = "CallCenterSection_Holder"
            self.pyclass = Holder

    class CallCenterItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CallCenterItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CallCenterItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "CallCenterItem_Holder"
            self.pyclass = Holder

    class EntitlementProcess_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EntitlementProcess")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntitlementProcess_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"active"), aname="_active", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"entryStartDateField"), aname="_entryStartDateField", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"exitCriteriaBooleanFilter"), aname="_exitCriteriaBooleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FilterItem",lazy=False)(pname=(ns,"exitCriteriaFilterItems"), aname="_exitCriteriaFilterItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"exitCriteriaFormula"), aname="_exitCriteriaFormula", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EntitlementProcessMilestoneItem",lazy=False)(pname=(ns,"milestones"), aname="_milestones", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.EntitlementProcess_Def.__bases__:
                bases = list(ns0.EntitlementProcess_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.EntitlementProcess_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntitlementProcessMilestoneItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EntitlementProcessMilestoneItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EntitlementProcessMilestoneItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"criteriaBooleanFilter"), aname="_criteriaBooleanFilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","FilterItem",lazy=False)(pname=(ns,"milestoneCriteriaFilterItems"), aname="_milestoneCriteriaFilterItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"milestoneCriteriaFormula"), aname="_milestoneCriteriaFormula", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"milestoneName"), aname="_milestoneName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"minutesToComplete"), aname="_minutesToComplete", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WorkflowActionReference",lazy=False)(pname=(ns,"successActions"), aname="_successActions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EntitlementProcessMilestoneTimeTrigger",lazy=False)(pname=(ns,"timeTriggers"), aname="_timeTriggers", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"useCriteriaStartTime"), aname="_useCriteriaStartTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._criteriaBooleanFilter = None
                    self._milestoneCriteriaFilterItems = []
                    self._milestoneCriteriaFormula = None
                    self._milestoneName = None
                    self._minutesToComplete = None
                    self._successActions = []
                    self._timeTriggers = []
                    self._useCriteriaStartTime = None
                    return
            Holder.__name__ = "EntitlementProcessMilestoneItem_Holder"
            self.pyclass = Holder

    class EntitlementProcessMilestoneTimeTrigger_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EntitlementProcessMilestoneTimeTrigger")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EntitlementProcessMilestoneTimeTrigger_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","WorkflowActionReference",lazy=False)(pname=(ns,"actions"), aname="_actions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"timeLength"), aname="_timeLength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","MilestoneTimeUnits",lazy=False)(pname=(ns,"workflowTimeTriggerUnit"), aname="_workflowTimeTriggerUnit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._actions = []
                    self._timeLength = None
                    self._workflowTimeTriggerUnit = None
                    return
            Holder.__name__ = "EntitlementProcessMilestoneTimeTrigger_Holder"
            self.pyclass = Holder

    class MilestoneTimeUnits_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "MilestoneTimeUnits")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MilestoneType_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "MilestoneType")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MilestoneType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.MilestoneType_Def.__bases__:
                bases = list(ns0.MilestoneType_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.MilestoneType_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntitlementTemplate_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EntitlementTemplate")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntitlementTemplate_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"businessHours"), aname="_businessHours", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"casesPerEntitlement"), aname="_casesPerEntitlement", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"entitlementProcess"), aname="_entitlementProcess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isPerIncident"), aname="_isPerIncident", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"term"), aname="_term", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.EntitlementTemplate_Def.__bases__:
                bases = list(ns0.EntitlementTemplate_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.EntitlementTemplate_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EntitlementSettings_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EntitlementSettings")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.EntitlementSettings_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"assetLookupLimitedToActiveEntitlementsOnAccount"), aname="_assetLookupLimitedToActiveEntitlementsOnAccount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"assetLookupLimitedToActiveEntitlementsOnContact"), aname="_assetLookupLimitedToActiveEntitlementsOnContact", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"assetLookupLimitedToSameAccount"), aname="_assetLookupLimitedToSameAccount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"assetLookupLimitedToSameContact"), aname="_assetLookupLimitedToSameContact", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableEntitlements"), aname="_enableEntitlements", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"entitlementLookupLimitedToActiveStatus"), aname="_entitlementLookupLimitedToActiveStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"entitlementLookupLimitedToSameAccount"), aname="_entitlementLookupLimitedToSameAccount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"entitlementLookupLimitedToSameAsset"), aname="_entitlementLookupLimitedToSameAsset", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"entitlementLookupLimitedToSameContact"), aname="_entitlementLookupLimitedToSameContact", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.EntitlementSettings_Def.__bases__:
                bases = list(ns0.EntitlementSettings_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.EntitlementSettings_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CaseSettings_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CaseSettings")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CaseSettings_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"caseAssignNotificationTemplate"), aname="_caseAssignNotificationTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"caseCloseNotificationTemplate"), aname="_caseCloseNotificationTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"caseCommentNotificationTemplate"), aname="_caseCommentNotificationTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"caseCreateNotificationTemplate"), aname="_caseCreateNotificationTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"closeCaseThroughStatusChange"), aname="_closeCaseThroughStatusChange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultCaseOwner"), aname="_defaultCaseOwner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultCaseOwnerType"), aname="_defaultCaseOwnerType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultCaseUser"), aname="_defaultCaseUser", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EmailToCaseSettings",lazy=False)(pname=(ns,"emailToCase"), aname="_emailToCase", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableCaseFeed"), aname="_enableCaseFeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableDraftEmails"), aname="_enableDraftEmails", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableEarlyEscalationRuleTriggers"), aname="_enableEarlyEscalationRuleTriggers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableNewEmailDefaultTemplate"), aname="_enableNewEmailDefaultTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableSuggestedArticlesApplication"), aname="_enableSuggestedArticlesApplication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableSuggestedArticlesCustomerPortal"), aname="_enableSuggestedArticlesCustomerPortal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableSuggestedArticlesPartnerPortal"), aname="_enableSuggestedArticlesPartnerPortal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableSuggestedSolutions"), aname="_enableSuggestedSolutions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"keepRecordTypeOnAssignmentRule"), aname="_keepRecordTypeOnAssignmentRule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newEmailDefaultTemplateClass"), aname="_newEmailDefaultTemplateClass", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"notifyContactOnCaseComment"), aname="_notifyContactOnCaseComment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"notifyDefaultCaseOwner"), aname="_notifyDefaultCaseOwner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"notifyOwnerOnCaseComment"), aname="_notifyOwnerOnCaseComment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"notifyOwnerOnCaseOwnerChange"), aname="_notifyOwnerOnCaseOwnerChange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showFewerCloseActions"), aname="_showFewerCloseActions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"useSystemEmailAddress"), aname="_useSystemEmailAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","WebToCaseSettings",lazy=False)(pname=(ns,"webToCase"), aname="_webToCase", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CaseSettings_Def.__bases__:
                bases = list(ns0.CaseSettings_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CaseSettings_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class EmailToCaseSettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EmailToCaseSettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EmailToCaseSettings_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"enableEmailToCase"), aname="_enableEmailToCase", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableHtmlEmail"), aname="_enableHtmlEmail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableOnDemandEmailToCase"), aname="_enableOnDemandEmailToCase", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableThreadIDInBody"), aname="_enableThreadIDInBody", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableThreadIDInSubject"), aname="_enableThreadIDInSubject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"notifyOwnerOnNewCaseEmail"), aname="_notifyOwnerOnNewCaseEmail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EmailToCaseOnFailureActionType",lazy=False)(pname=(ns,"overEmailLimitAction"), aname="_overEmailLimitAction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EmailToCaseRoutingAddress",lazy=False)(pname=(ns,"routingAddresses"), aname="_routingAddresses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","EmailToCaseOnFailureActionType",lazy=False)(pname=(ns,"unauthorizedSenderAction"), aname="_unauthorizedSenderAction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._enableEmailToCase = None
                    self._enableHtmlEmail = None
                    self._enableOnDemandEmailToCase = None
                    self._enableThreadIDInBody = None
                    self._enableThreadIDInSubject = None
                    self._notifyOwnerOnNewCaseEmail = None
                    self._overEmailLimitAction = None
                    self._routingAddresses = []
                    self._unauthorizedSenderAction = None
                    return
            Holder.__name__ = "EmailToCaseSettings_Holder"
            self.pyclass = Holder

    class EmailToCaseRoutingAddress_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EmailToCaseRoutingAddress")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.EmailToCaseRoutingAddress_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","EmailToCaseRoutingAddressType",lazy=False)(pname=(ns,"addressType"), aname="_addressType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authorizedSenders"), aname="_authorizedSenders", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"caseOrigin"), aname="_caseOrigin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"caseOwner"), aname="_caseOwner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"caseOwnerType"), aname="_caseOwnerType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"casePriority"), aname="_casePriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"createTask"), aname="_createTask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"emailAddress"), aname="_emailAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"routingName"), aname="_routingName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"saveEmailHeaders"), aname="_saveEmailHeaders", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"taskStatus"), aname="_taskStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._addressType = None
                    self._authorizedSenders = None
                    self._caseOrigin = None
                    self._caseOwner = None
                    self._caseOwnerType = None
                    self._casePriority = None
                    self._createTask = None
                    self._emailAddress = None
                    self._routingName = None
                    self._saveEmailHeaders = None
                    self._taskStatus = None
                    return
            Holder.__name__ = "EmailToCaseRoutingAddress_Holder"
            self.pyclass = Holder

    class WebToCaseSettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WebToCaseSettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.WebToCaseSettings_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"caseOrigin"), aname="_caseOrigin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"defaultResponseTemplate"), aname="_defaultResponseTemplate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableWebToCase"), aname="_enableWebToCase", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._caseOrigin = None
                    self._defaultResponseTemplate = None
                    self._enableWebToCase = None
                    return
            Holder.__name__ = "WebToCaseSettings_Holder"
            self.pyclass = Holder

    class MobileSettings_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "MobileSettings")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MobileSettings_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ChatterMobileSettings",lazy=False)(pname=(ns,"chatterMobile"), aname="_chatterMobile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DashboardMobileSettings",lazy=False)(pname=(ns,"dashboardMobile"), aname="_dashboardMobile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SFDCMobileSettings",lazy=False)(pname=(ns,"salesforceMobile"), aname="_salesforceMobile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","TouchMobileSettings",lazy=False)(pname=(ns,"touchMobile"), aname="_touchMobile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.MobileSettings_Def.__bases__:
                bases = list(ns0.MobileSettings_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.MobileSettings_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ChatterMobileSettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ChatterMobileSettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ChatterMobileSettings_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"androidAuthorized"), aname="_androidAuthorized", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"blackberryAuthorized"), aname="_blackberryAuthorized", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableChatterMobile"), aname="_enableChatterMobile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enablePushNotifications"), aname="_enablePushNotifications", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"iPadAuthorized"), aname="_iPadAuthorized", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"iPhoneAuthorized"), aname="_iPhoneAuthorized", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","MobileSessionTimeout",lazy=False)(pname=(ns,"sessionTimeout"), aname="_sessionTimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._androidAuthorized = None
                    self._blackberryAuthorized = None
                    self._enableChatterMobile = None
                    self._enablePushNotifications = None
                    self._iPadAuthorized = None
                    self._iPhoneAuthorized = None
                    self._sessionTimeout = None
                    return
            Holder.__name__ = "ChatterMobileSettings_Holder"
            self.pyclass = Holder

    class DashboardMobileSettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardMobileSettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DashboardMobileSettings_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"enableDashboardIPadApp"), aname="_enableDashboardIPadApp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._enableDashboardIPadApp = None
                    return
            Holder.__name__ = "DashboardMobileSettings_Holder"
            self.pyclass = Holder

    class SFDCMobileSettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SFDCMobileSettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SFDCMobileSettings_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"enableMobileLite"), aname="_enableMobileLite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableUserToDeviceLinking"), aname="_enableUserToDeviceLinking", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._enableMobileLite = None
                    self._enableUserToDeviceLinking = None
                    return
            Holder.__name__ = "SFDCMobileSettings_Holder"
            self.pyclass = Holder

    class TouchMobileSettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "TouchMobileSettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TouchMobileSettings_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"enableTouchAppIPad"), aname="_enableTouchAppIPad", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableTouchBrowserIPad"), aname="_enableTouchBrowserIPad", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableTouchIosPhone"), aname="_enableTouchIosPhone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"enableVisualforceInTouch"), aname="_enableVisualforceInTouch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._enableTouchAppIPad = None
                    self._enableTouchBrowserIPad = None
                    self._enableTouchIosPhone = None
                    self._enableVisualforceInTouch = None
                    return
            Holder.__name__ = "TouchMobileSettings_Holder"
            self.pyclass = Holder

    class NetworkStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "NetworkStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CustomBrandAssetCategory_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomBrandAssetCategory")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CompanySettings_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CompanySettings")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CompanySettings_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FiscalYearSettings",lazy=False)(pname=(ns,"fiscalYear"), aname="_fiscalYear", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.CompanySettings_Def.__bases__:
                bases = list(ns0.CompanySettings_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.CompanySettings_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FiscalYearSettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FiscalYearSettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FiscalYearSettings_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fiscalYearNameBasedOn"), aname="_fiscalYearNameBasedOn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startMonth"), aname="_startMonth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fiscalYearNameBasedOn = None
                    self._startMonth = None
                    return
            Holder.__name__ = "FiscalYearSettings_Holder"
            self.pyclass = Holder

    class APIAccessLevel_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "APIAccessLevel")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Article_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Article")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AssignToLookupValueType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "AssignToLookupValueType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BaseSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "BaseSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BaseSharingRule_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","SharedTo",lazy=False)(pname=(ns,"sharedTo"), aname="_sharedTo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.BaseSharingRule_Def.__bases__:
                bases = list(ns0.BaseSharingRule_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.BaseSharingRule_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Metadata_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Metadata")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Metadata_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fullName"), aname="_fullName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fullName = None
                    return
            Holder.__name__ = "Metadata_Holder"
            self.pyclass = Holder

    class BusinessHoursSourceType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "BusinessHoursSourceType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CaseType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CaseType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Channel_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Channel")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ChartPosition_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ChartPosition")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ChartType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ChartType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ChartUnits_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ChartUnits")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Complexity_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Complexity")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CriteriaBasedSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CriteriaBasedSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CriteriaBasedSharingRule_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FilterItem",lazy=False)(pname=(ns,"criteriaItems"), aname="_criteriaItems", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.BaseSharingRule_Def not in ns0.CriteriaBasedSharingRule_Def.__bases__:
                bases = list(ns0.CriteriaBasedSharingRule_Def.__bases__)
                bases.insert(0, ns0.BaseSharingRule_Def)
                ns0.CriteriaBasedSharingRule_Def.__bases__ = tuple(bases)

            ns0.BaseSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CustomSettingsType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomSettingsType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CustomSettingsVisibility_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "CustomSettingsVisibility")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DashboardComponentFilter_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardComponentFilter")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DashboardComponentType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardComponentType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DashboardFilterOperation_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DashboardFilterOperation")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeleteConstraint_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DeleteConstraint")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeployOptions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DeployOptions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DeployOptions_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"allowMissingFiles"), aname="_allowMissingFiles", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"autoUpdatePackage"), aname="_autoUpdatePackage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"checkOnly"), aname="_checkOnly", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"ignoreWarnings"), aname="_ignoreWarnings", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"performRetrieve"), aname="_performRetrieve", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"purgeOnDelete"), aname="_purgeOnDelete", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"rollbackOnError"), aname="_rollbackOnError", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"runAllTests"), aname="_runAllTests", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"runTests"), aname="_runTests", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"singlePackage"), aname="_singlePackage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._allowMissingFiles = None
                    self._autoUpdatePackage = None
                    self._checkOnly = None
                    self._ignoreWarnings = None
                    self._performRetrieve = None
                    self._purgeOnDelete = None
                    self._rollbackOnError = None
                    self._runAllTests = None
                    self._runTests = []
                    self._singlePackage = None
                    return
            Holder.__name__ = "DeployOptions_Holder"
            self.pyclass = Holder

    class DeployProblemType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DeployProblemType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeploymentStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "DeploymentStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EmailToCaseOnFailureActionType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EmailToCaseOnFailureActionType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EmailToCaseRoutingAddressType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EmailToCaseRoutingAddressType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class EscalationStartTimeType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "EscalationStartTimeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Expiration_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Expiration")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FieldType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FieldType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FilterOperation_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FilterOperation")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FilterScope_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FilterScope")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FlowAssignmentOperator_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowAssignmentOperator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FlowComparisonOperator_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowComparisonOperator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FlowRecordFilterOperator_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowRecordFilterOperator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FlowScreenFieldType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "FlowScreenFieldType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Folder_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Folder")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.Folder_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FolderAccessTypes",lazy=False)(pname=(ns,"accessType"), aname="_accessType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","PublicFolderAccess",lazy=False)(pname=(ns,"publicFolderAccess"), aname="_publicFolderAccess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","SharedTo",lazy=False)(pname=(ns,"sharedTo"), aname="_sharedTo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.Folder_Def.__bases__:
                bases = list(ns0.Folder_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.Folder_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PublicFolderAccess_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PublicFolderAccess")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ForecastCategories_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ForecastCategories")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Gender_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Gender")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class KnowledgeCaseEditor_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "KnowledgeCaseEditor")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LayoutHeader_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LayoutHeader")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LayoutSectionStyle_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LayoutSectionStyle")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LetterheadHorizontalAlignment_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LetterheadHorizontalAlignment")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LetterheadVerticalAlignment_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LetterheadVerticalAlignment")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ListMetadataQuery_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ListMetadataQuery")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListMetadataQuery_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"folder"), aname="_folder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._folder = None
                    self._type = None
                    return
            Holder.__name__ = "ListMetadataQuery_Holder"
            self.pyclass = Holder

    class LockoutInterval_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LockoutInterval")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LogCategory_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LogCategory")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LogCategoryLevel_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LogCategoryLevel")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LogInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LogInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LogInfo_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","LogCategory",lazy=False)(pname=(ns,"category"), aname="_category", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LogCategoryLevel",lazy=False)(pname=(ns,"level"), aname="_level", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._category = None
                    self._level = None
                    return
            Holder.__name__ = "LogInfo_Holder"
            self.pyclass = Holder

    class LogType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LogType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LookupValueType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "LookupValueType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MaxLoginAttempts_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "MaxLoginAttempts")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MetadataWithContent_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "MetadataWithContent")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.MetadataWithContent_Def.schema
            TClist = [ZSI.TC.Base64String(pname=(ns,"content"), aname="_content", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.MetadataWithContent_Def.__bases__:
                bases = list(ns0.MetadataWithContent_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.MetadataWithContent_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MinPasswordLength_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "MinPasswordLength")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MobileSessionTimeout_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "MobileSessionTimeout")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OwnerSharingRule_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "OwnerSharingRule")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OwnerSharingRule_Def.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","SharedTo",lazy=False)(pname=(ns,"sharedFrom"), aname="_sharedFrom", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.BaseSharingRule_Def not in ns0.OwnerSharingRule_Def.__bases__:
                bases = list(ns0.OwnerSharingRule_Def.__bases__)
                bases.insert(0, ns0.BaseSharingRule_Def)
                ns0.OwnerSharingRule_Def.__bases__ = tuple(bases)

            ns0.BaseSharingRule_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PageComponentType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PageComponentType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PageComponentWidth_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PageComponentWidth")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PermissionSetTabVisibility_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PermissionSetTabVisibility")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PortalType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "PortalType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Possessive_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Possessive")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuestionRestriction_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "QuestionRestriction")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReportAggregateDatatype_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportAggregateDatatype")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ReportChartSize_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ReportChartSize")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RetrieveRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RetrieveRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.RetrieveRequest_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"apiVersion"), aname="_apiVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"packageNames"), aname="_packageNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"singlePackage"), aname="_singlePackage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"specificFiles"), aname="_specificFiles", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Package",lazy=False)(pname=(ns,"unpackaged"), aname="_unpackaged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiVersion = None
                    self._packageNames = []
                    self._singlePackage = None
                    self._specificFiles = []
                    self._unpackaged = None
                    return
            Holder.__name__ = "RetrieveRequest_Holder"
            self.pyclass = Holder

    class RoleOrTerritory_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "RoleOrTerritory")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RoleOrTerritory_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"caseAccessLevel"), aname="_caseAccessLevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"contactAccessLevel"), aname="_contactAccessLevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"mayForecastManagerShare"), aname="_mayForecastManagerShare", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"opportunityAccessLevel"), aname="_opportunityAccessLevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.RoleOrTerritory_Def.__bases__:
                bases = list(ns0.RoleOrTerritory_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.RoleOrTerritory_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SessionTimeout_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SessionTimeout")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SharingModel_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SharingModel")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SharingRules_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SharingRules")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SharingRules_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.SharingRules_Def.__bases__:
                bases = list(ns0.SharingRules_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.SharingRules_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SortOrder_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "SortOrder")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StartsWith_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "StartsWith")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TabVisibility_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "TabVisibility")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Template_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "Template")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TreatBlanksAs_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "TreatBlanksAs")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UiBehavior_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "UiBehavior")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UpdateMetadata_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "UpdateMetadata")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.UpdateMetadata_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"currentName"), aname="_currentName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","Metadata",lazy=False)(pname=(ns,"metadata"), aname="_metadata", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._currentName = None
                    self._metadata = None
                    return
            Holder.__name__ = "UpdateMetadata_Holder"
            self.pyclass = Holder

    class UserDateInterval_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "UserDateInterval")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WebLinkDisplayType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WebLinkDisplayType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class WorkflowAction_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "WorkflowAction")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.WorkflowAction_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Metadata_Def not in ns0.WorkflowAction_Def.__bases__:
                bases = list(ns0.WorkflowAction_Def.__bases__)
                bases.insert(0, ns0.Metadata_Def)
                ns0.WorkflowAction_Def.__bases__ = tuple(bases)

            ns0.Metadata_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ID_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "ID")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StatusCode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://soap.sforce.com/2006/04/metadata"
        type = (schema, "StatusCode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DebuggingInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DebuggingInfo"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.DebuggingInfo_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"debugLog"), aname="_debugLog", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","DebuggingInfo")
            kw["aname"] = "_DebuggingInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._debugLog = None
                    return
            Holder.__name__ = "DebuggingInfo_Holder"
            self.pyclass = Holder

    class DebuggingHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "DebuggingHeader"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.DebuggingHeader_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","LogInfo",lazy=False)(pname=(ns,"categories"), aname="_categories", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","LogType",lazy=False)(pname=(ns,"debugLevel"), aname="_debugLevel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","DebuggingHeader")
            kw["aname"] = "_DebuggingHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categories = []
                    self._debugLevel = None
                    return
            Holder.__name__ = "DebuggingHeader_Holder"
            self.pyclass = Holder

    class CallOptions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CallOptions"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.CallOptions_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"client"), aname="_client", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","CallOptions")
            kw["aname"] = "_CallOptions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._client = None
                    return
            Holder.__name__ = "CallOptions_Holder"
            self.pyclass = Holder

    class SessionHeader_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SessionHeader"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.SessionHeader_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"sessionId"), aname="_sessionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","SessionHeader")
            kw["aname"] = "_SessionHeader"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    return
            Holder.__name__ = "SessionHeader_Holder"
            self.pyclass = Holder

    class checkDeployStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkDeployStatus"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.checkDeployStatus_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ID",lazy=False)(pname=(ns,"asyncProcessId"), aname="_asyncProcessId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","checkDeployStatus")
            kw["aname"] = "_checkDeployStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._asyncProcessId = None
                    return
            Holder.__name__ = "checkDeployStatus_Holder"
            self.pyclass = Holder

    class checkDeployStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkDeployStatusResponse"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.checkDeployStatusResponse_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","DeployResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","checkDeployStatusResponse")
            kw["aname"] = "_checkDeployStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "checkDeployStatusResponse_Holder"
            self.pyclass = Holder

    class checkRetrieveStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkRetrieveStatus"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.checkRetrieveStatus_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ID",lazy=False)(pname=(ns,"asyncProcessId"), aname="_asyncProcessId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","checkRetrieveStatus")
            kw["aname"] = "_checkRetrieveStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._asyncProcessId = None
                    return
            Holder.__name__ = "checkRetrieveStatus_Holder"
            self.pyclass = Holder

    class checkRetrieveStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkRetrieveStatusResponse"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.checkRetrieveStatusResponse_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","RetrieveResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","checkRetrieveStatusResponse")
            kw["aname"] = "_checkRetrieveStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "checkRetrieveStatusResponse_Holder"
            self.pyclass = Holder

    class checkStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkStatus"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.checkStatus_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ID",lazy=False)(pname=(ns,"asyncProcessId"), aname="_asyncProcessId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","checkStatus")
            kw["aname"] = "_checkStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._asyncProcessId = []
                    return
            Holder.__name__ = "checkStatus_Holder"
            self.pyclass = Holder

    class checkStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkStatusResponse"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.checkStatusResponse_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","AsyncResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","checkStatusResponse")
            kw["aname"] = "_checkStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = []
                    return
            Holder.__name__ = "checkStatusResponse_Holder"
            self.pyclass = Holder

    class create_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "create"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.create_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","Metadata",lazy=False)(pname=(ns,"metadata"), aname="_metadata", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","create")
            kw["aname"] = "_create"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._metadata = []
                    return
            Holder.__name__ = "create_Holder"
            self.pyclass = Holder

    class createResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createResponse"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.createResponse_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","AsyncResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","createResponse")
            kw["aname"] = "_createResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = []
                    return
            Holder.__name__ = "createResponse_Holder"
            self.pyclass = Holder

    class delete_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "delete"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.delete_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","Metadata",lazy=False)(pname=(ns,"metadata"), aname="_metadata", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","delete")
            kw["aname"] = "_delete"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._metadata = []
                    return
            Holder.__name__ = "delete_Holder"
            self.pyclass = Holder

    class deleteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteResponse"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.deleteResponse_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","AsyncResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","deleteResponse")
            kw["aname"] = "_deleteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = []
                    return
            Holder.__name__ = "deleteResponse_Holder"
            self.pyclass = Holder

    class deploy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deploy"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.deploy_Dec.schema
            TClist = [ZSI.TC.Base64String(pname=(ns,"ZipFile"), aname="_ZipFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://soap.sforce.com/2006/04/metadata","DeployOptions",lazy=False)(pname=(ns,"DeployOptions"), aname="_DeployOptions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","deploy")
            kw["aname"] = "_deploy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ZipFile = None
                    self._DeployOptions = None
                    return
            Holder.__name__ = "deploy_Holder"
            self.pyclass = Holder

    class deployResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deployResponse"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.deployResponse_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","AsyncResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","deployResponse")
            kw["aname"] = "_deployResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "deployResponse_Holder"
            self.pyclass = Holder

    class describeMetadata_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "describeMetadata"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.describeMetadata_Dec.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"asOfVersion"), aname="_asOfVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","describeMetadata")
            kw["aname"] = "_describeMetadata"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._asOfVersion = None
                    return
            Holder.__name__ = "describeMetadata_Holder"
            self.pyclass = Holder

    class describeMetadataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "describeMetadataResponse"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.describeMetadataResponse_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","DescribeMetadataResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","describeMetadataResponse")
            kw["aname"] = "_describeMetadataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "describeMetadataResponse_Holder"
            self.pyclass = Holder

    class listMetadata_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "listMetadata"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.listMetadata_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","ListMetadataQuery",lazy=False)(pname=(ns,"queries"), aname="_queries", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"asOfVersion"), aname="_asOfVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","listMetadata")
            kw["aname"] = "_listMetadata"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._queries = []
                    self._asOfVersion = None
                    return
            Holder.__name__ = "listMetadata_Holder"
            self.pyclass = Holder

    class listMetadataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "listMetadataResponse"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.listMetadataResponse_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","FileProperties",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","listMetadataResponse")
            kw["aname"] = "_listMetadataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = []
                    return
            Holder.__name__ = "listMetadataResponse_Holder"
            self.pyclass = Holder

    class retrieve_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "retrieve"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.retrieve_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","RetrieveRequest",lazy=False)(pname=(ns,"retrieveRequest"), aname="_retrieveRequest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","retrieve")
            kw["aname"] = "_retrieve"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._retrieveRequest = None
                    return
            Holder.__name__ = "retrieve_Holder"
            self.pyclass = Holder

    class retrieveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "retrieveResponse"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.retrieveResponse_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","AsyncResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","retrieveResponse")
            kw["aname"] = "_retrieveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    return
            Holder.__name__ = "retrieveResponse_Holder"
            self.pyclass = Holder

    class update_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "update"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.update_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","UpdateMetadata",lazy=False)(pname=(ns,"UpdateMetadata"), aname="_UpdateMetadata", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","update")
            kw["aname"] = "_update"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._UpdateMetadata = []
                    return
            Holder.__name__ = "update_Holder"
            self.pyclass = Holder

    class updateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateResponse"
        schema = "http://soap.sforce.com/2006/04/metadata"
        def __init__(self, **kw):
            ns = ns0.updateResponse_Dec.schema
            TClist = [GTD("http://soap.sforce.com/2006/04/metadata","AsyncResult",lazy=False)(pname=(ns,"result"), aname="_result", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://soap.sforce.com/2006/04/metadata","updateResponse")
            kw["aname"] = "_updateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = []
                    return
            Holder.__name__ = "updateResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://soap.sforce.com/2006/04/metadata)
